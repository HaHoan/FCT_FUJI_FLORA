-- WARNING: Do NOT edit the input and output ports in this file in a text
-- editor if you plan to continue editing the block that represents it in
-- the Block Editor! File corruption is VERY likely to occur.

-- Copyright (C) 2017  Intel Corporation. All rights reserved.
-- Your use of Intel Corporation's design tools, logic functions
-- and other software and tools, and its AMPP partner logic
-- functions, and any output files from any of the foregoing
-- (including device programming or simulation files), and any
-- associated documentation or information are expressly subject
-- to the terms and conditions of the Intel Program License
-- Subscription Agreement, the Intel Quartus Prime License Agreement,
-- the Intel MegaCore Function License Agreement, or other
-- applicable license agreement, including, without limitation,
-- that your use is for the sole purpose of programming logic
-- devices manufactured by Intel and sold by Intel or its
-- authorized distributors.  Please refer to the applicable
-- agreement for further details.


-- Generated by Quartus Prime Version 17.0 (Build Build 595 04/25/2017)
-- Created on Fri Jun 01 16:33:36 2018

LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_unsigned.all;
use IEEE.std_logic_arith.all;

--  Entity Declaration

ENTITY BASE_VALID IS
-- {{ALTERA_IO_BEGIN}} DO NOT REMOVE THIS LINE!
PORT
(
	RESET 		: IN	STD_LOGIC;
	CLK100M		: IN	STD_LOGIC;
	FREQVALID	: IN	STD_LOGIC_VECTOR(2 downto 0);
	START 		: IN	STD_LOGIC;
	FVALID		: OUT	STD_LOGIC
);
-- {{ALTERA_IO_END}} DO NOT REMOVE THIS LINE!

END BASE_VALID;


--  Architecture Body

ARCHITECTURE BASE_VALID_architecture OF BASE_VALID IS

	signal	VALID_CNT	: std_logic_vector( 31 downto 0 );
	signal	VALID_CMP	: std_logic_vector( 31 downto 0 );

BEGIN

	process (
		RESET
	)
	begin
		
		if ( RESET = '0' ) then
			VALID_CNT			<= ( others=>'0' );	-- Zero Clear
			FVALID				<= '0';
			
		elsif ( START = '0' ) then
			case FREQVALID is
				When "000" =>	--    1msec
					VALID_CMP	<= X"000186A0";
				when "001" =>	--   10msec
					VALID_CMP	<= X"000F4240";
				when "010" =>	--  100msec
					VALID_CMP	<= X"00989680";
				when "011" =>	-- 1000msec
					VALID_CMP	<= X"05F5E100";
				when "100" =>	-- ever
					VALID_CMP	<= X"FFFFFFFF";
				when "101" =>	-- ever
					VALID_CMP	<= X"FFFFFFFF";
				when "110" =>	-- ever
					VALID_CMP	<= X"FFFFFFFF";
				when "111" =>	-- ever
					VALID_CMP	<= X"FFFFFFFF";
			end case;
			VALID_CNT	<= ( others => '0' );
		
		elsif ( CLK100M'event and CLK100M = '1' ) then
			
			if ( VALID_CMP /= X"FFFFFFFF" ) then
			
				if ( VALID_CNT < VALID_CMP ) then
					VALID_CNT	<= VALID_CNT + '1';
					FVALID		<= '1';
				else
					FVALID		<= '0';
				end if;
			else
			-- ever
				FVALID	<= '1';
			end if;

		else
			NULL;
		
		end if;
		
	end process;
	

END BASE_VALID_architecture;
