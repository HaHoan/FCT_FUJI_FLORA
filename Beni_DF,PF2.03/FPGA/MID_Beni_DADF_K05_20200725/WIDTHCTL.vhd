-- WARNING: Do NOT edit the input and output ports in this file in a text
-- editor if you plan to continue editing the block that represents it in
-- the Block Editor! File corruption is VERY likely to occur.

-- Copyright (C) 2017  Intel Corporation. All rights reserved.
-- Your use of Intel Corporation's design tools, logic functions
-- and other software and tools, and its AMPP partner logic
-- functions, and any output files from any of the foregoing
-- (including device programming or simulation files), and any
-- associated documentation or information are expressly subject
-- to the terms and conditions of the Intel Program License
-- Subscription Agreement, the Intel Quartus Prime License Agreement,
-- the Intel MegaCore Function License Agreement, or other
-- applicable license agreement, including, without limitation,
-- that your use is for the sole purpose of programming logic
-- devices manufactured by Intel and sold by Intel or its
-- authorized distributors.  Please refer to the applicable
-- agreement for further details.


-- Generated by Quartus Prime Version 17.0 (Build Build 595 04/25/2017)
-- Created on Fri Jun 01 19:33:14 2018

LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_unsigned.all;
use IEEE.std_logic_arith.all;


--  Entity Declaration

ENTITY WIDTHCTL IS
-- {{ALTERA_IO_BEGIN}} DO NOT REMOVE THIS LINE!
PORT
(
	RESET				: IN	STD_LOGIC;
	START				: IN	STD_LOGIC;
	CLK100M			: IN	STD_LOGIC;
	FLTFREQ			: IN	STD_LOGIC;
	WIDTHMODE		: IN	STD_LOGIC_VECTOR(1 downto 0);
	WIDTHSTART		: OUT	STD_LOGIC;
	WIDTHEND			: OUT	STD_LOGIC
);
-- {{ALTERA_IO_END}} DO NOT REMOVE THIS LINE!

END WIDTHCTL;


--  Architecture Body

ARCHITECTURE WIDTHCTL_architecture OF WIDTHCTL IS

	signal	WIDTHSTA				: std_logic_vector ( 1 downto 0 );

BEGIN

	process (
		RESET,
		START,
		CLK100M,
		FLTFREQ,
		WIDTHMODE
	)
	begin
		
		if ( ( RESET = '0' ) or ( START = '0' ) ) then
			WIDTHSTA			<= "00";
			WIDTHSTART		<= '0';
			WIDTHENd			<= '0';
			
		elsif ( CLK100M'event and CLK100M = '1' )  then
			case WIDTHMODE is
				when "00" =>		-- Up-Up
					if		( WIDTHSTA = "00" ) then
						if ( FLTFREQ = '0' )  then
							WIDTHSTART		<= '0';
							WIDTHEND			<= '0';
							WIDTHSTA			<= "01";
						else
							NULL;
						end if;
					elsif	( WIDTHSTA = "01" ) then
						if ( FLTFREQ = '1' )  then
							WIDTHSTART		<= '1';
							WIDTHEND			<= '0';
							WIDTHSTA			<= "11";
						else
							NULL;
						end if;
					elsif ( WIDTHSTA = "11" ) then
						if ( FLTFREQ = '0' )  then
							WIDTHSTART		<= '1';
							WIDTHEND			<= '0';
							WIDTHSTA			<= "10";
						else
							NULL;
						end if;
					else
						if ( FLTFREQ = '1' )  then
							WIDTHSTART		<= '1';
							WIDTHEND			<= '1';
							WIDTHSTA			<= "10";
						else
							NULL;
						end if;
					end if;
				when "01" =>		-- Up-Down
					if ( WIDTHSTA = "00" ) then
						if ( FLTFREQ = '0' ) then
							WIDTHSTART		<= '0';
							WIDTHEND			<= '0';
							WIDTHSTA			<= "01";
						else
							NULL;
						end if;
					elsif ( WIDTHSTA = "01" ) then
						if ( FLTFREQ = '1' ) then
							WIDTHSTART		<= '1';
							WIDTHEND			<= '0';
							WIDTHSTA			<= "11";
						else
							NULL;
						end if;
					else -- 11
						if ( FLTFREQ = '0' ) then
							WIDTHSTART		<= '1';
							WIDTHEND			<= '1';
							WIDTHSTA			<= "11";
						else
							NULL;
						end if;
					end if;
				when "10" =>		-- Down-Up
					if ( WIDTHSTA = "00" ) then
						if ( FLTFREQ = '1' ) then
							WIDTHSTART		<= '0';
							WIDTHEND			<= '0';
							WIDTHSTA			<= "01";
						else
							NULL;
						end if;
					elsif ( WIDTHSTA = "01" ) then
						if ( FLTFREQ = '0' ) then
							WIDTHSTART		<= '1';
							WIDTHEND			<= '0';
							WIDTHSTA			<= "11";
						else
							NULL;
						end if;
					else	-- 11
						if ( FLTFREQ = '1' ) then
							WIDTHSTART		<= '1';
							WIDTHEND			<= '1';
							WIDTHSTA			<= "11";
						else
							NULL;
						end if;
					end if;
				when "11" =>		-- Down-Down
					if ( WIDTHSTA = "00" ) then
						if ( FLTFREQ = '1' ) then
							WIDTHSTART		<= '0';
							WIDTHEND			<= '0';
							WIDTHSTA			<= "01";
						else
							NULL;
						end if;
					elsif ( WIDTHSTA = "01" ) then
						if ( FLTFREQ = '0' ) then
							WIDTHSTART		<= '1';
							WIDTHEND			<= '0';
							WIDTHSTA			<= "11";
						else
							NULL;
						end if;
					elsif ( WIDTHSTA = "11" ) then
						if ( FLTFREQ = '1' ) then
							WIDTHSTART		<= '1';
							WIDTHEND			<= '0';
							WIDTHSTA			<= "10";
						else
							NULL;
						end if;
					else	-- 10
						if ( FLTFREQ = '0' ) then
							WIDTHSTART		<= '1';
							WIDTHEND			<= '1';
							WIDTHSTA			<= "10";
						else
							NULL;
						end if;
					end if;
			end case;
		else
			NULL;
		end if;
	end process;
		


END WIDTHCTL_architecture;
