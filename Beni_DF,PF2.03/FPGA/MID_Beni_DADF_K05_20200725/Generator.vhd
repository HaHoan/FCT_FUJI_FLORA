-- WARNING: Do NOT edit the input and output ports in this file in a text
-- editor if you plan to continue editing the block that represents it in
-- the Block Editor! File corruption is VERY likely to occur.

-- Copyright (C) 2017  Intel Corporation. All rights reserved.
-- Your use of Intel Corporation's design tools, logic functions
-- and other software and tools, and its AMPP partner logic
-- functions, and any output files from any of the foregoing
-- (including device programming or simulation files), and any
-- associated documentation or information are expressly subject
-- to the terms and conditions of the Intel Program License
-- Subscription Agreement, the Intel Quartus Prime License Agreement,
-- the Intel MegaCore Function License Agreement, or other
-- applicable license agreement, including, without limitation,
-- that your use is for the sole purpose of programming logic
-- devices manufactured by Intel and sold by Intel or its
-- authorized distributors.  Please refer to the applicable
-- agreement for further details.


-- Generated by Quartus Prime Version 17.0 (Build Build 595 04/25/2017)
-- Created on Sat Jun 02 16:59:02 2018

LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_unsigned.all;
use IEEE.std_logic_arith.all;


--  Entity Declaration

ENTITY Generator IS
-- {{ALTERA_IO_BEGIN}} DO NOT REMOVE THIS LINE!
PORT
(
	RESET				: IN		STD_LOGIC;
	SOFTRES			: IN		STD_LOGIC;
	BASECLK			: IN		STD_LOGIC;
	OutEnable		: IN		STD_LOGIC;
	START				: IN		STD_LOGIC;
	WidthSize		: IN		STD_LOGIC_VECTOR ( 15 downto 0 );
	UpPosition		: IN		STD_LOGIC_VECTOR ( 15 downto 0 );
	DownPosition	: IN		STD_LOGIC_VECTOR ( 15 downto 0 );
	CycleSize		: IN		STD_LOGIC_VECTOR ( 15 downto 0 );
	StartCount		: IN		STD_LOGIC_VECTOR ( 15 downto 0 );
	CountNow			: OUT		STD_LOGIC_VECTOR ( 15 downto 0 );
	EOF				: OUT		STD_LOGIC;
	GenOut			: OUT		STD_LOGIC
);
-- {{ALTERA_IO_END}} DO NOT REMOVE THIS LINE!

END Generator;


--  Architecture Body

ARCHITECTURE Generator_architecture OF Generator IS

	signal	Count						: std_logic_vector ( 15 downto 0 );
	signal	GenCnt					: std_logic_vector ( 15 downto 0 );
	signal	fEnd						: std_logic;
	signal	Output					: std_logic;

BEGIN

	EOF		<= fEnd;
	CountNow	<= Count;
	GenOut	<= Output;

	process
	(
		RESET,
		SOFTRES,
		BASECLK,
		OutEnable,
		START,
		WidthSize,
		UpPosition,
		DownPosition,
		CycleSize,
		StartCount
	)
	begin
		
		if ( ( RESET = '0' ) or ( SOFTRES = '1' ) ) then
			Count		<= ( others => '0' );
			fEnd		<= '0';
			GenCnt	<= ( others => '0' );
			Output	<= '0';
		elsif ( OutEnable = '0' ) then
			NULL;
		elsif ( BASECLK'event and BASECLK = '1' ) then
			
			if ( START = '1' ) then
				
				if ( fEnd = '0' ) then
					if ( ( CycleSize = X"FFFF" ) or ( ( CycleSize /= X"FFFF" ) and ( Count < CycleSize ) ) ) then
						GenCnt <= GenCnt + '1';
						if		( GenCnt >= ( WidthSize - 1 ) ) then
							GenCnt	<= ( Others => '0' );
							Count		<= Count + '1';
							
						elsif	( GenCnt >= DownPosition ) then
							Output <= '0';
						elsif ( GenCnt >= UpPosition ) then
							if ( Count >= StartCount ) then
								Output <= '1';
							else
								Output <= '0';
							end if;
						else
							NULL;
						end if;
					else
						Output	<= '0';
						fEnd		<= '1';
					end if;
				else
					NULL;
				end if;
			else
				Count		<= ( others => '0' );
				Output	<= '0';
				GenCnt	<= ( others => '0' );
				fEnd		<= '0';
			end if;
		else
			NULL;
		end if;
	
	
	
	end process;


END Generator_architecture;
