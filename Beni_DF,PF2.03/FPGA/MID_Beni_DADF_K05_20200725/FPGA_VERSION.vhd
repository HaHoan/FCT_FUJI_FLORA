-- WARNING: Do NOT edit the input and output ports in this file in a text
-- editor if you plan to continue editing the block that represents it in
-- the Block Editor! File corruption is VERY likely to occur.

-- Copyright (C) 2017  Intel Corporation. All rights reserved.
-- Your use of Intel Corporation's design tools, logic functions
-- and other software and tools, and its AMPP partner logic
-- functions, and any output files from any of the foregoing
-- (including device programming or simulation files), and any
-- associated documentation or information are expressly subject
-- to the terms and conditions of the Intel Program License
-- Subscription Agreement, the Intel Quartus Prime License Agreement,
-- the Intel MegaCore Function License Agreement, or other
-- applicable license agreement, including, without limitation,
-- that your use is for the sole purpose of programming logic
-- devices manufactured by Intel and sold by Intel or its
-- authorized distributors.  Please refer to the applicable
-- agreement for further details.


-- Generated by Quartus Prime Version 17.0 (Build Build 595 04/25/2017)
-- Created on Thu Apr 19 13:20:20 2018

LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_unsigned.all;
use IEEE.std_logic_arith.all;

--  Entity Declaration

ENTITY FPGA_VERSION IS
-- {{ALTERA_IO_BEGIN}} DO NOT REMOVE THIS LINE!
GENERIC
(
	DATE	 			: STD_LOGIC_VECTOR ( 31 DOWNTO 0 ) := X"20180419";
	VERSION			: STD_LOGIc_VECToR ( 31 downto 0 ) := X"00000000"
);
PORT
(
	RESET				: IN	STD_LOGIC;
	ADR				: IN	STD_LOGIC_VECTOR ( 15 downto 0 );
	RDe				: IN	STD_LOGIC;
	DATO				: OUT	STD_LOGIC_VECTOR (  7 downto 0 );

	CLK10KHZ			: IN	STD_LOGIC;
	CLK10HZ			: IN	STD_LOGIC;
	VER_LED			: OUT	STD_LOGIC_VECTOR (  7 downto 0 );
	TESTP				: OUT STD_LOGIC_VECTOR (  7 downto 0 )
);
-- {{ALTERA_IO_END}} DO NOT REMOVE THIS LINE!

END FPGA_VERSION;


--  Architecture Body

ARCHITECTURE FPGA_VERSION_architecture OF FPGA_VERSION IS

	COMPONENT flashLED
		GENERIC
		(
			ONTIME	: integer;
			PHASETIME: integer
		);
		PORT
		(
			CLK		: IN	STD_LOGIC;
			FLASHCLK	: OUT	STD_LOGIC
		);
	END COMPONENT;
	signal	FCLK	: std_logic;
	
	COMPONENT updn_to_8bit
		GENERIC
		(
			COUNTMAX	: integer;
			COUNTMIN	: integer;
			SWDEF		: integer;
			ALTEN		: integer
		);
		PORT
		(
			CLK		: IN	STD_LOGIC;
			UP			: IN	STD_LOGIC;
			DN			: IN	STD_LOGIC;
			BYTEOUT	: OUT	STD_LOGIC_VECTOR ( 7 downto 0 )
		);
	END COMPONENT;
	signal	OUTSEL: STD_LOGIC_VECTOR ( 7 downto 0 );
	
	COMPONENT select8x8
		PORT
		(
			IN0		: IN	STD_LOGIC_VECTOR ( 7 downto 0 );
			IN1		: IN	STD_LOGIC_VECTOR ( 7 downto 0 );
			IN2		: IN	STD_LOGIC_VECTOR ( 7 downto 0 );
			IN3		: IN	STD_LOGIC_VECTOR ( 7 downto 0 );
			IN4		: IN	STD_LOGIC_VECTOR ( 7 downto 0 );
			IN5		: IN	STD_LOGIC_VECTOR ( 7 downto 0 );
			IN6		: IN	STD_LOGIC_VECTOR ( 7 downto 0 );
			IN7		: IN	STD_LOGIC_VECTOR ( 7 downto 0 );
			SEL		: IN	STD_LOGIC_VECTOR ( 2 downto 0 );
			OUTO		: OUT	STD_LOGIC_VECTOR ( 7 downto 0 )
		);
	END COMPONENT;
	signal	BLINK	: STD_LOGIC_VECTOR ( 7 downto 0 );
	
	signal	DATA_O: STD_LOGIC_VECTOR ( 7 downto 0 );
	signal	D_Hiz	: STD_LOGIC;

BEGIN

	TESTP ( 0 ) <= FCLK;
	TESTP ( 7 downto 1 ) <= (others => '0' );

	DATO <= ( others => 'Z' ) when D_Hiz = '1' else DATA_O;
	
	
	process ( 
		RESET,
		ADR,
		RDe
	)
	begin

		if ( RESET = '0' ) then
			D_Hiz		<= '1';
			DATA_O	<= X"CC";
		elsif ( RDe = '0' ) then
			if		( X"FFF0" <= ADR and ADR <= X"FFF3" ) then
				DATA_O <= DATE ( ( ( CONV_INTEGER( ADR ( 1 downto 0 ) ) + 1 ) * 8 - 1 ) downto ( CONV_INTEGER ( ADR ( 1 downto 0 ) ) * 8 ) );
				D_Hiz <= '0';
			elsif	( X"FFF4" <= ADR and ADR <= X"FFF7" ) then
				DATA_O <= VERSION ( ( ( CONV_INTEGER( ADR ( 1 downto 0 ) ) + 1 ) * 8 - 1 ) downto ( CONV_INTEGER ( ADR ( 1 downto 0 ) ) * 8 ) );
				D_Hiz <= '0';
			else
				D_Hiz <= '1';
			end if;
		else
			D_Hiz <= '1';
		end if;
	end process;

	
	
	-- 外部モニタ用モジュール ( TIOより
	flashLED0: flashLED
		generic map ( 1000, 17000 )
		port map ( CLK10KHZ, FCLK );
	
	updn_to_8bit0: updn_to_8bit
		generic map ( 4, 0, 0, 1 )
		port map ( CLK10KHz, FCLK, '0', OUTSEL );
		
	BLINK <= ( others => CLK10HZ );
	Selsect8x80: select8x8
		port map ( BLINK, DATE ( 31 downto 24 ), DATE ( 23 downto 16 ), DATE ( 15 downto 8 ), DATE ( 7 downto 0 ), X"00", X"00", X"00", OUTSEL ( 2 downto 0 ), VER_LED );
	
	
END FPGA_VERSION_architecture;
