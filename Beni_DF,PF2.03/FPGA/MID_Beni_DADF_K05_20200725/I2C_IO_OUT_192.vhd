-- WARNING: Do NOT edit the input and output ports in this file in a text
-- editor if you plan to continue editing the block that represents it in
-- the Block Editor! File corruption is VERY likely to occur.

-- Copyright (C) 2017  Intel Corporation. All rights reserved.
-- Your use of Intel Corporation's design tools, logic functions
-- and other software and tools, and its AMPP partner logic
-- functions, and any output files from any of the foregoing
-- (including device programming or simulation files), and any
-- associated documentation or information are expressly subject
-- to the terms and conditions of the Intel Program License
-- Subscription Agreement, the Intel Quartus Prime License Agreement,
-- the Intel MegaCore Function License Agreement, or other
-- applicable license agreement, including, without limitation,
-- that your use is for the sole purpose of programming logic
-- devices manufactured by Intel and sold by Intel or its
-- authorized distributors.  Please refer to the applicable
-- agreement for further details.


-- Generated by Quartus Prime Version 17.0 (Build Build 595 04/25/2017)
-- Created on Wed Apr 11 11:48:43 2018

LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_unsigned.all;
use IEEE.std_logic_arith.all;


--  Entity Declaration

ENTITY I2C_IO_OUT_192 IS
-- {{ALTERA_IO_BEGIN}} DO NOT REMOVE THIS LINE!
PORT
(
RESET : IN STD_LOGIC;
CLK100 : IN STD_LOGIC;
ADR : IN STD_LOGIC_VECTOR(15 downto 0);
RDe : IN STD_LOGIC;
WRe : IN STD_LOGIC;
DATI : IN STD_LOGIC_VECTOR(7 downto 0);
DATO : OUT STD_LOGIC_VECTOR(7 downto 0);
IO_OUT0 : OUT STD_LOGIC_VECTOR(95 downto 0);
IO_OUT1 : OUT STD_LOGIC_VECTOR(95 downto 0);
TPOUT : OUT STD_LOGIC_VECTOR(15 downto 0)
);
-- {{ALTERA_IO_END}} DO NOT REMOVE THIS LINE!

END I2C_IO_OUT_192;


--  Architecture Body

ARCHITECTURE I2C_IO_OUT_192_architecture OF I2C_IO_OUT_192 IS

	signal	OUTBUFL	: std_logic_vector( 95 downto 0 );
	signal	OUTBUFU	: std_logic_vector( 95 downto 0 );
	signal	D_Hiz		: std_logic;
	signal	DATA_O	: std_logic_vector(  7 downto 0 );
BEGIN

	IO_OUT0	<= OUTBUFL;
	IO_OUT1	<= OUTBUFU;
	
	DATO <= ( others => 'Z' ) when D_Hiz = '1' else DATA_O;
	
	-- REG W/R Control process --
	process ( 
		RESET,
		RDe,
		WRe,
		ADR
	)
	begin
		if ( RESET = '0' ) then
			OUTBUFL	<= ( others=> '0' );		-- lower initialize Lo
			OUTBUFU	<= ( others=> '0' );		-- upper	initialize Lo
			D_Hiz		<= '1';
			
		else
			if 	( RDe = '0' and WRe = '1' ) then
			-- Read Reg
				if		( X"0020" <= ADR and ADR <= X"002B" ) then
					DATA_O <= OUTBUFL( ( ( CONV_INTEGER ( ADR ( 3 downto 0 ) ) + 1 ) * 8 - 1 ) downto ( CONV_INTEGER ( ADR ( 3 downto 0 ) ) * 8 ) );
					D_Hiz <= '0';
				elsif ( X"0030" <= ADR and ADR <= X"003B" ) then
					DATA_O <= OUTBUFU( ( ( CONV_INTEGER ( ADR ( 3 downto 0 ) ) + 1 ) * 8 - 1 ) downto ( CONV_INTEGER ( ADR ( 3 downto 0 ) ) * 8 ) );
					D_Hiz <= '0';
				else
					D_Hiz <= '1';
				end if;
			elsif ( RDe = '1' and WRe = '0' ) then
			-- Write Reg
				if 	( X"0020" <= ADR and ADR <= X"002B" ) then
					OUTBUFL ( ( ( CONV_INTEGER ( ADR ( 3 downto 0 ) ) + 1 ) * 8 - 1 ) downto ( CONV_INTEGER ( ADR ( 3 downto 0 ) ) * 8 ) ) <= DATI;
				elsif ( X"0030" <= ADR and ADR <= X"003B" ) then
					OUTBUFU ( ( ( CONV_INTEGER ( ADR ( 3 downto 0 ) ) + 1 ) * 8 - 1 ) downto ( CONV_INTEGER ( ADR ( 3 downto 0 ) ) * 8 ) ) <= DATI;
				else
					NULL;
				end if;
				D_Hiz <= '1';
			else
				D_Hiz <= '1';
			end if;
		end if;
	
	
	end process;

	
	

END I2C_IO_OUT_192_architecture;
