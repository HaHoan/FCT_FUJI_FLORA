-- WARNING: Do NOT edit the input and output ports in this file in a text
-- editor if you plan to continue editing the block that represents it in
-- the Block Editor! File corruption is VERY likely to occur.

-- Copyright (C) 2017  Intel Corporation. All rights reserved.
-- Your use of Intel Corporation's design tools, logic functions
-- and other software and tools, and its AMPP partner logic
-- functions, and any output files from any of the foregoing
-- (including device programming or simulation files), and any
-- associated documentation or information are expressly subject
-- to the terms and conditions of the Intel Program License
-- Subscription Agreement, the Intel Quartus Prime License Agreement,
-- the Intel MegaCore Function License Agreement, or other
-- applicable license agreement, including, without limitation,
-- that your use is for the sole purpose of programming logic
-- devices manufactured by Intel and sold by Intel or its
-- authorized distributors.  Please refer to the applicable
-- agreement for further details.


-- Generated by Quartus Prime Version 17.0 (Build Build 595 04/25/2017)
-- Created on Tue Apr 10 16:35:20 2018

LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_unsigned.all;
use IEEE.std_logic_arith.all;


--  Entity Declaration

ENTITY PinFunction IS
-- {{ALTERA_IO_BEGIN}} DO NOT REMOVE THIS LINE!
PORT
(
	IO_OUT0		: IN		STD_LOGIC_VECTOR ( 95 downto 0 );
	IO_OUT1		: IN		STD_LOGIC_VECTOR ( 95 downto 0 );
	ADR			: IN		STD_LOGIC_VECTOR ( 15 downto 0 );
	RDe			: IN		STD_LOGIC;
	WRe			: IN		STD_LOGIC;
	DATI			: IN		STD_LOGIC_VECTOR (  7 downto 0 );
	RESET			: IN		STD_LOGIC;
	CLK100		: IN		STD_LOGIC;
	IO_IN0		: OUT		STD_LOGIC_VECTOR ( 95 downto 0 );
	IO_IN1		: OUT		STD_LOGIC_VECTOR ( 95 downto 0 );
	DATO			: OUT		STD_LOGIC_VECTOR (  7 downto 0 );
	TPOUT			: OUT		STD_LOGIC_VECTOR ( 15 downto 0 );
	IOL			: INOUT	STD_LOGIC_VECTOR ( 95 downto 0 );
	IOU			: INOUT	STD_LOGIC_VECTOR ( 95 downto 0 );
	-- 16ch -> 8ch
--	CKO			: IN		STD_LOGIC_VECTOR ( 15 downto 0 );
	CKO			: IN		STD_LOGIC_VECTOR (  7 downto 0 );
	CKI			: OUT		STD_LOGIC_VECTOR ( 15 downto 0 );
	MOTI			: OUT		STD_LOGIC_VECTOR ( 47 downto 0 );
	LEDB			: OUT		STD_LOGIC_VECTOR (  7 downto 0 );
	PWBA_OK		: IN		STD_LOGIC
);
-- {{ALTERA_IO_END}} DO NOT REMOVE THIS LINE!

END PinFunction;


--  Architecture Body

ARCHITECTURE PinFunction_architecture OF PinFunction IS

	signal	VERSION					: std_logic_vector( 31 downto 0 ) := X"20191015";

	-- Pinfunction レジスタ --
--	type reg8	is array ( 0 to 191 ) of std_logic_vector( 7 downto 0 );
--	signal	pfType					: reg8;
--	signal	pfChnl					: reg8;
	
--	type reg5x96	is array ( 0 to 95 ) of std_logic_vector ( 4 downto 0 );
--	signal	CKOCHL					: reg5x96;		-- Lower (IO000-IO096)
--	signal	CKOCHU					: reg5x96;		-- Upper (IO100-IO196)

	type reg5x96	is array ( 0 to 95 ) of std_logic_vector ( 3 downto 0 );
	signal	CKOCHU					: reg5x96;		-- Upper (IO100-IO196)

	
--	signal	pfOutInvL				: std_logic_vector( 95 downto 0 );
	signal	pfOutInvU				: std_logic_vector( 95 downto 0 );

--	signal	pfOutTypL				: std_logic_vector( 95 downto 0 );
	signal	pfOutTypU				: std_logic_vector( 95 downto 0 );
	
--	signal	OUTTMPL					: std_logic_vector( 95 downto 0 );
	signal	OUTTMPU					: std_logic_vector( 95 downto 0 );
	
--	signal	INVTL						: std_logic_vector( 95 downto 0 );
	signal	INVTU						: std_logic_vector( 95 downto 0 );
--	signal	PUPLL						: std_logic_vector( 95 downto 0 );
	signal	PUPLU						: std_logic_vector( 95 downto 0 );
--	signal	nOEL						: std_logic_vector( 95 downto 0 );
	signal	nOEU						: std_logic_vector( 95 downto 0 );
	
	type reg8x16	is array ( 0 to 15 ) of std_logic_vector ( 7 downto 0 );
	signal	CKICH						: reg8x16;
	
	signal	MONREG					: std_logic_vector ( 7 downto 0 );
	
	-- OUTCTL --
	COMPONENT	OUTCTL
		PORT
		(
			INP		: IN	STD_LOGIC;
			INV		: IN	STD_LOGIC;
			PP			: IN	STD_LOGIC;
			nOE		: IN	STD_LOGIC;
			CKO		: IN	STD_LOGIC;
			OUTP		: OUT	STD_LOGIC
		);
	END COMPONENT;
	signal	CKOBUF					: std_logic_vector ( 31 downto 0 );		-- 15 .. 0 有効
	
	

	type reg8x12	is array ( 0 to 11 ) of std_logic_vector ( 7 downto 0 );
	signal	MOTSEL					: reg8x12;
	
	
	
	signal	D_Hiz						: std_logic;
	signal	DATA_O					: std_logic_vector (  7 downto 0 );
BEGIN

--	TPOUT <= ( others => '0' );
	TPOUT ( 0 ) <= CKOBUF ( 0 );
	TPOUT ( 15 downto 1 ) <= ( others => '0' );
	

	
	DATO <= ( others => 'Z' ) when D_Hiz = '1' else DATA_O;
	
	-- INポートはIOを接続
--	IO_IN0	<= IOL;		-- Lower
	IO_IN1	<= IOU;		-- Upper
	
	
	-- CKI(L0) --
--	CKI(  0 ) <= 'L' when CKICH(  0 ) >= X"60" else IOU( CONV_INTEGER( CKICH(  0 ) ) );
--	CKI(  1 ) <= 'L' when CKICH(  1 ) >= X"60" else IOU( CONV_INTEGER( CKICH(  1 ) ) );
	CKI(  0 ) <= 'L' when CKICH(  0 ) >= X"60" else IOU( CONV_INTEGER( CKICH(  0 ) ) ) or PWBA_OK;
	CKI(  1 ) <= 'L' when CKICH(  1 ) >= X"60" else IOU( CONV_INTEGER( CKICH(  1 ) ) ) or PWBA_OK;
	CKI(  2 ) <= 'L' when CKICH(  2 ) >= X"60" else IOU( CONV_INTEGER( CKICH(  2 ) ) );
	CKI(  3 ) <= 'L' when CKICH(  3 ) >= X"60" else IOU( CONV_INTEGER( CKICH(  3 ) ) );
	CKI(  4 ) <= 'L' when CKICH(  4 ) >= X"60" else IOU( CONV_INTEGER( CKICH(  4 ) ) );
	CKI(  5 ) <= 'L' when CKICH(  5 ) >= X"60" else IOU( CONV_INTEGER( CKICH(  5 ) ) );
	CKI(  6 ) <= 'L' when CKICH(  6 ) >= X"60" else IOU( CONV_INTEGER( CKICH(  6 ) ) );
	CKI(  7 ) <= 'L' when CKICH(  7 ) >= X"60" else IOU( CONV_INTEGER( CKICH(  7 ) ) );
	CKI(  8 ) <= 'L' when CKICH(  8 ) >= X"60" else IOU( CONV_INTEGER( CKICH(  8 ) ) );
	CKI(  9 ) <= 'L' when CKICH(  9 ) >= X"60" else IOU( CONV_INTEGER( CKICH(  9 ) ) );
	CKI( 10 ) <= 'L' when CKICH( 10 ) >= X"60" else IOU( CONV_INTEGER( CKICH( 10 ) ) );
	CKI( 11 ) <= 'L' when CKICH( 11 ) >= X"60" else IOU( CONV_INTEGER( CKICH( 11 ) ) );
	CKI( 12 ) <= 'L' when CKICH( 12 ) >= X"60" else IOU( CONV_INTEGER( CKICH( 12 ) ) );
	CKI( 13 ) <= 'L' when CKICH( 13 ) >= X"60" else IOU( CONV_INTEGER( CKICH( 13 ) ) );
	CKI( 14 ) <= 'L' when CKICH( 14 ) >= X"60" else IOU( CONV_INTEGER( CKICH( 14 ) ) );
	CKI( 15 ) <= 'L' when CKICH( 15 ) >= X"60" else IOU( CONV_INTEGER( CKICH( 15 ) ) );
	
	
	-- CLO --
	CKOBUF (  7 downto  0 ) <= CKO;
	CKOBUF ( 31 downto  8 ) <= ( others => '0' );		-- Do not edit !
	

	-- MOTI(LO) --
	-- MOT0
	MOTI (  0 ) <= '0' when MOTSEL (  0 ) >= X"60" else IOU ( CONV_INTEGER ( MOTSEL (  0 ) ) + 0 );
	MOTI (  1 ) <= '0' when MOTSEL (  0 ) >= X"60" else IOU ( CONV_INTEGER ( MOTSEL (  0 ) ) + 1 );
	MOTI (  2 ) <= '0' when MOTSEL (  0 ) >= X"60" else IOU ( CONV_INTEGER ( MOTSEL (  0 ) ) + 2 );
	MOTI (  3 ) <= '0' when MOTSEL (  0 ) >= X"60" else IOU ( CONV_INTEGER ( MOTSEL (  0 ) ) + 3 );
	-- MOT1
	MOTI (  4 ) <= '0' when MOTSEL (  1 ) >= X"60" else IOU ( CONV_INTEGER ( MOTSEL (  1 ) ) + 0 );
	MOTI (  5 ) <= '0' when MOTSEL (  1 ) >= X"60" else IOU ( CONV_INTEGER ( MOTSEL (  1 ) ) + 1 );
	MOTI (  6 ) <= '0' when MOTSEL (  1 ) >= X"60" else IOU ( CONV_INTEGER ( MOTSEL (  1 ) ) + 2 );
	MOTI (  7 ) <= '0' when MOTSEL (  1 ) >= X"60" else IOU ( CONV_INTEGER ( MOTSEL (  1 ) ) + 3 );
	-- MOT2
	MOTI (  8 ) <= '0' when MOTSEL (  2 ) >= X"60" else IOU ( CONV_INTEGER ( MOTSEL (  2 ) ) + 0 );
	MOTI (  9 ) <= '0' when MOTSEL (  2 ) >= X"60" else IOU ( CONV_INTEGER ( MOTSEL (  2 ) ) + 1 );
	MOTI ( 10 ) <= '0' when MOTSEL (  2 ) >= X"60" else IOU ( CONV_INTEGER ( MOTSEL (  2 ) ) + 2 );
	MOTI ( 11 ) <= '0' when MOTSEL (  2 ) >= X"60" else IOU ( CONV_INTEGER ( MOTSEL (  2 ) ) + 3 );
	-- MOT3
	MOTI ( 12 ) <= '0' when MOTSEL (  3 ) >= X"60" else IOU ( CONV_INTEGER ( MOTSEL (  3 ) ) + 0 );
	MOTI ( 13 ) <= '0' when MOTSEL (  3 ) >= X"60" else IOU ( CONV_INTEGER ( MOTSEL (  3 ) ) + 1 );
	MOTI ( 14 ) <= '0' when MOTSEL (  3 ) >= X"60" else IOU ( CONV_INTEGER ( MOTSEL (  3 ) ) + 2 );
	MOTI ( 15 ) <= '0' when MOTSEL (  3 ) >= X"60" else IOU ( CONV_INTEGER ( MOTSEL (  3 ) ) + 3 );
	-- MOT4
	MOTI ( 16 ) <= '0' when MOTSEL (  4 ) >= X"60" else IOU ( CONV_INTEGER ( MOTSEL (  4 ) ) + 0 );
	MOTI ( 17 ) <= '0' when MOTSEL (  4 ) >= X"60" else IOU ( CONV_INTEGER ( MOTSEL (  4 ) ) + 1 );
	MOTI ( 18 ) <= '0' when MOTSEL (  4 ) >= X"60" else IOU ( CONV_INTEGER ( MOTSEL (  4 ) ) + 2 );
	MOTI ( 19 ) <= '0' when MOTSEL (  4 ) >= X"60" else IOU ( CONV_INTEGER ( MOTSEL (  4 ) ) + 3 );
	-- MOT5
	MOTI ( 20 ) <= '0' when MOTSEL (  5 ) >= X"60" else IOU ( CONV_INTEGER ( MOTSEL (  5 ) ) + 0 );
	MOTI ( 21 ) <= '0' when MOTSEL (  5 ) >= X"60" else IOU ( CONV_INTEGER ( MOTSEL (  5 ) ) + 1 );
	MOTI ( 22 ) <= '0' when MOTSEL (  5 ) >= X"60" else IOU ( CONV_INTEGER ( MOTSEL (  5 ) ) + 2 );
	MOTI ( 23 ) <= '0' when MOTSEL (  5 ) >= X"60" else IOU ( CONV_INTEGER ( MOTSEL (  5 ) ) + 3 );
	-- MOT6
	MOTI ( 24 ) <= '0' when MOTSEL (  6 ) >= X"60" else IOU ( CONV_INTEGER ( MOTSEL (  6 ) ) + 0 );
	MOTI ( 25 ) <= '0' when MOTSEL (  6 ) >= X"60" else IOU ( CONV_INTEGER ( MOTSEL (  6 ) ) + 1 );
	MOTI ( 26 ) <= '0' when MOTSEL (  6 ) >= X"60" else IOU ( CONV_INTEGER ( MOTSEL (  6 ) ) + 2 );
	MOTI ( 27 ) <= '0' when MOTSEL (  6 ) >= X"60" else IOU ( CONV_INTEGER ( MOTSEL (  6 ) ) + 3 );
	-- MOT7
	MOTI ( 28 ) <= '0' when MOTSEL (  7 ) >= X"60" else IOU ( CONV_INTEGER ( MOTSEL (  7 ) ) + 0 );
	MOTI ( 29 ) <= '0' when MOTSEL (  7 ) >= X"60" else IOU ( CONV_INTEGER ( MOTSEL (  7 ) ) + 1 );
	MOTI ( 30 ) <= '0' when MOTSEL (  7 ) >= X"60" else IOU ( CONV_INTEGER ( MOTSEL (  7 ) ) + 2 );
	MOTI ( 31 ) <= '0' when MOTSEL (  7 ) >= X"60" else IOU ( CONV_INTEGER ( MOTSEL (  7 ) ) + 3 );
	-- MOT8
	MOTI ( 32 ) <= '0' when MOTSEL (  8 ) >= X"60" else IOU ( CONV_INTEGER ( MOTSEL (  8 ) ) + 0 );
	MOTI ( 33 ) <= '0' when MOTSEL (  8 ) >= X"60" else IOU ( CONV_INTEGER ( MOTSEL (  8 ) ) + 1 );
	MOTI ( 34 ) <= '0' when MOTSEL (  8 ) >= X"60" else IOU ( CONV_INTEGER ( MOTSEL (  8 ) ) + 2 );
	MOTI ( 35 ) <= '0' when MOTSEL (  8 ) >= X"60" else IOU ( CONV_INTEGER ( MOTSEL (  8 ) ) + 3 );
	-- MOT9
	MOTI ( 36 ) <= '0' when MOTSEL (  9 ) >= X"60" else IOU ( CONV_INTEGER ( MOTSEL (  9 ) ) + 0 );
	MOTI ( 37 ) <= '0' when MOTSEL (  9 ) >= X"60" else IOU ( CONV_INTEGER ( MOTSEL (  9 ) ) + 1 );
	MOTI ( 38 ) <= '0' when MOTSEL (  9 ) >= X"60" else IOU ( CONV_INTEGER ( MOTSEL (  9 ) ) + 2 );
	MOTI ( 39 ) <= '0' when MOTSEL (  9 ) >= X"60" else IOU ( CONV_INTEGER ( MOTSEL (  9 ) ) + 3 );
	-- MOT10
	MOTI ( 40 ) <= '0' when MOTSEL ( 10 ) >= X"60" else IOU ( CONV_INTEGER ( MOTSEL ( 10 ) ) + 0 );
	MOTI ( 41 ) <= '0' when MOTSEL ( 10 ) >= X"60" else IOU ( CONV_INTEGER ( MOTSEL ( 10 ) ) + 1 );
	MOTI ( 42 ) <= '0' when MOTSEL ( 10 ) >= X"60" else IOU ( CONV_INTEGER ( MOTSEL ( 10 ) ) + 2 );
	MOTI ( 43 ) <= '0' when MOTSEL ( 10 ) >= X"60" else IOU ( CONV_INTEGER ( MOTSEL ( 10 ) ) + 3 );
	-- MOT11
	MOTI ( 44 ) <= '0' when MOTSEL ( 11 ) >= X"60" else IOU ( CONV_INTEGER ( MOTSEL ( 11 ) ) + 0 );
	MOTI ( 45 ) <= '0' when MOTSEL ( 11 ) >= X"60" else IOU ( CONV_INTEGER ( MOTSEL ( 11 ) ) + 1 );
	MOTI ( 46 ) <= '0' when MOTSEL ( 11 ) >= X"60" else IOU ( CONV_INTEGER ( MOTSEL ( 11 ) ) + 2 );
	MOTI ( 47 ) <= '0' when MOTSEL ( 11 ) >= X"60" else IOU ( CONV_INTEGER ( MOTSEL ( 11 ) ) + 3 );
	
	
	LEDB ( 0 ) <= IOU( CONV_INTEGER ( MONREG ) * 8 + 0 );
	LEDB ( 1 ) <= IOU( CONV_INTEGER ( MONREG ) * 8 + 1 );
	LEDB ( 2 ) <= IOU( CONV_INTEGER ( MONREG ) * 8 + 2 );
	LEDB ( 3 ) <= IOU( CONV_INTEGER ( MONREG ) * 8 + 3 );
	LEDB ( 4 ) <= IOU( CONV_INTEGER ( MONREG ) * 8 + 4 );
	LEDB ( 5 ) <= IOU( CONV_INTEGER ( MONREG ) * 8 + 5 );
	LEDB ( 6 ) <= IOU( CONV_INTEGER ( MONREG ) * 8 + 6 );
	LEDB ( 7 ) <= IOU( CONV_INTEGER ( MONREG ) * 8 + 7 );
	
--	CKI(  0 ) <= 'L' when CKICH(  0 ) >= X"60" else IOU( CONV_INTEGER( CKICH(  0 ) ) );
--	CKI(  1 ) <= 'L' when CKICH(  1 ) >= X"60" else IOU( CONV_INTEGER( CKICH(  1 ) ) );
--	CKI(  2 ) <= 'L' when CKICH(  2 ) >= X"60" else IOU( CONV_INTEGER( CKICH(  2 ) ) );
--	CKI(  3 ) <= 'L' when CKICH(  3 ) >= X"60" else IOU( CONV_INTEGER( CKICH(  3 ) ) );
--	CKI(  4 ) <= 'L' when CKICH(  4 ) >= X"60" else IOU( CONV_INTEGER( CKICH(  4 ) ) );
--	CKI(  5 ) <= 'L' when CKICH(  5 ) >= X"60" else IOU( CONV_INTEGER( CKICH(  5 ) ) );
--	CKI(  6 ) <= 'L' when CKICH(  6 ) >= X"60" else IOU( CONV_INTEGER( CKICH(  6 ) ) );
--	CKI(  7 ) <= 'L' when CKICH(  7 ) >= X"60" else IOU( CONV_INTEGER( CKICH(  7 ) ) );
	
	
--	OUTCTL0:		OUTCTL port map ( OUTTMPL(   0 ), pfOutInvL(   0 ), pfOutTypL(   0 ), nOEL(   0 ), CKOBUF ( CONV_INTEGER ( CKOCHL (  0 ) ) ), IOL(   0 ) );
--	OUTCTL1:		OUTCTL port map ( OUTTMPL(   1 ), pfOutInvL(   1 ), pfOutTypL(   1 ), nOEL(   1 ), CKOBUF ( CONV_INTEGER ( CKOCHL (  1 ) ) ), IOL(   1 ) );
--	OUTCTL2:		OUTCTL port map ( OUTTMPL(   2 ), pfOutInvL(   2 ), pfOutTypL(   2 ), nOEL(   2 ), CKOBUF ( CONV_INTEGER ( CKOCHL (  2 ) ) ), IOL(   2 ) );
--	OUTCTL3:		OUTCTL port map ( OUTTMPL(   3 ), pfOutInvL(   3 ), pfOutTypL(   3 ), nOEL(   3 ), CKOBUF ( CONV_INTEGER ( CKOCHL (  3 ) ) ), IOL(   3 ) );
--	OUTCTL4:		OUTCTL port map ( OUTTMPL(   4 ), pfOutInvL(   4 ), pfOutTypL(   4 ), nOEL(   4 ), CKOBUF ( CONV_INTEGER ( CKOCHL (  4 ) ) ), IOL(   4 ) );
--	OUTCTL5:		OUTCTL port map ( OUTTMPL(   5 ), pfOutInvL(   5 ), pfOutTypL(   5 ), nOEL(   5 ), CKOBUF ( CONV_INTEGER ( CKOCHL (  5 ) ) ), IOL(   5 ) );
--	OUTCTL6:		OUTCTL port map ( OUTTMPL(   6 ), pfOutInvL(   6 ), pfOutTypL(   6 ), nOEL(   6 ), CKOBUF ( CONV_INTEGER ( CKOCHL (  6 ) ) ), IOL(   6 ) );
--	OUTCTL7:		OUTCTL port map ( OUTTMPL(   7 ), pfOutInvL(   7 ), pfOutTypL(   7 ), nOEL(   7 ), CKOBUF ( CONV_INTEGER ( CKOCHL (  7 ) ) ), IOL(   7 ) );

--	OUTCTL8:		OUTCTL port map ( OUTTMPL(   8 ), pfOutInvL(   8 ), pfOutTypL(   8 ), nOEL(   8 ), CKOBUF ( CONV_INTEGER ( CKOCHL (  8 ) ) ), IOL(   8 ) );
--	OUTCTL9:		OUTCTL port map ( OUTTMPL(   9 ), pfOutInvL(   9 ), pfOutTypL(   9 ), nOEL(   9 ), CKOBUF ( CONV_INTEGER ( CKOCHL (  9 ) ) ), IOL(   9 ) );
--	OUTCTL10:	OUTCTL port map ( OUTTMPL(  10 ), pfOutInvL(  10 ), pfOutTypL(  10 ), nOEL(  10 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 10 ) ) ), IOL(  10 ) );
--	OUTCTL11:	OUTCTL port map ( OUTTMPL(  11 ), pfOutInvL(  11 ), pfOutTypL(  11 ), nOEL(  11 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 11 ) ) ), IOL(  11 ) );
--	OUTCTL12:	OUTCTL port map ( OUTTMPL(  12 ), pfOutInvL(  12 ), pfOutTypL(  12 ), nOEL(  12 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 12 ) ) ), IOL(  12 ) );
--	OUTCTL13:	OUTCTL port map ( OUTTMPL(  13 ), pfOutInvL(  13 ), pfOutTypL(  13 ), nOEL(  13 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 13 ) ) ), IOL(  13 ) );
--	OUTCTL14:	OUTCTL port map ( OUTTMPL(  14 ), pfOutInvL(  14 ), pfOutTypL(  14 ), nOEL(  14 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 14 ) ) ), IOL(  14 ) );
--	OUTCTL15:	OUTCTL port map ( OUTTMPL(  15 ), pfOutInvL(  15 ), pfOutTypL(  15 ), nOEL(  15 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 15 ) ) ), IOL(  15 ) );

--	OUTCTL16:	OUTCTL port map ( OUTTMPL(  16 ), pfOutInvL(  16 ), pfOutTypL(  16 ), nOEL(  16 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 16 ) ) ), IOL(  16 ) );
--	OUTCTL17:	OUTCTL port map ( OUTTMPL(  17 ), pfOutInvL(  17 ), pfOutTypL(  17 ), nOEL(  17 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 17 ) ) ), IOL(  17 ) );
--	OUTCTL18:	OUTCTL port map ( OUTTMPL(  18 ), pfOutInvL(  18 ), pfOutTypL(  18 ), nOEL(  18 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 18 ) ) ), IOL(  18 ) );
--	OUTCTL19:	OUTCTL port map ( OUTTMPL(  19 ), pfOutInvL(  19 ), pfOutTypL(  19 ), nOEL(  19 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 19 ) ) ), IOL(  19 ) );
--	OUTCTL20:	OUTCTL port map ( OUTTMPL(  20 ), pfOutInvL(  20 ), pfOutTypL(  20 ), nOEL(  20 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 20 ) ) ), IOL(  20 ) );
--	OUTCTL21:	OUTCTL port map ( OUTTMPL(  21 ), pfOutInvL(  21 ), pfOutTypL(  21 ), nOEL(  21 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 21 ) ) ), IOL(  21 ) );
--	OUTCTL22:	OUTCTL port map ( OUTTMPL(  22 ), pfOutInvL(  22 ), pfOutTypL(  22 ), nOEL(  22 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 22 ) ) ), IOL(  22 ) );
--	OUTCTL23:	OUTCTL port map ( OUTTMPL(  23 ), pfOutInvL(  23 ), pfOutTypL(  23 ), nOEL(  23 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 23 ) ) ), IOL(  23 ) );

--	OUTCTL24:	OUTCTL port map ( OUTTMPL(  24 ), pfOutInvL(  24 ), pfOutTypL(  24 ), nOEL(  24 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 24 ) ) ), IOL(  24 ) );
--	OUTCTL25:	OUTCTL port map ( OUTTMPL(  25 ), pfOutInvL(  25 ), pfOutTypL(  25 ), nOEL(  25 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 25 ) ) ), IOL(  25 ) );
--	OUTCTL26:	OUTCTL port map ( OUTTMPL(  26 ), pfOutInvL(  26 ), pfOutTypL(  26 ), nOEL(  26 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 26 ) ) ), IOL(  26 ) );
--	OUTCTL27:	OUTCTL port map ( OUTTMPL(  27 ), pfOutInvL(  27 ), pfOutTypL(  27 ), nOEL(  27 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 27 ) ) ), IOL(  27 ) );
--	OUTCTL28:	OUTCTL port map ( OUTTMPL(  28 ), pfOutInvL(  28 ), pfOutTypL(  28 ), nOEL(  28 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 28 ) ) ), IOL(  28 ) );
--	OUTCTL29:	OUTCTL port map ( OUTTMPL(  29 ), pfOutInvL(  29 ), pfOutTypL(  29 ), nOEL(  29 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 29 ) ) ), IOL(  29 ) );
--	OUTCTL30:	OUTCTL port map ( OUTTMPL(  30 ), pfOutInvL(  30 ), pfOutTypL(  30 ), nOEL(  30 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 30 ) ) ), IOL(  30 ) );
--	OUTCTL31:	OUTCTL port map ( OUTTMPL(  31 ), pfOutInvL(  31 ), pfOutTypL(  31 ), nOEL(  31 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 31 ) ) ), IOL(  31 ) );

--	OUTCTL32:	OUTCTL port map ( OUTTMPL(  32 ), pfOutInvL(  32 ), pfOutTypL(  32 ), nOEL(  32 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 32 ) ) ), IOL(  32 ) );
--	OUTCTL33:	OUTCTL port map ( OUTTMPL(  33 ), pfOutInvL(  33 ), pfOutTypL(  33 ), nOEL(  33 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 33 ) ) ), IOL(  33 ) );
--	OUTCTL34:	OUTCTL port map ( OUTTMPL(  34 ), pfOutInvL(  34 ), pfOutTypL(  34 ), nOEL(  34 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 34 ) ) ), IOL(  34 ) );
--	OUTCTL35:	OUTCTL port map ( OUTTMPL(  35 ), pfOutInvL(  35 ), pfOutTypL(  35 ), nOEL(  35 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 35 ) ) ), IOL(  35 ) );
--	OUTCTL36:	OUTCTL port map ( OUTTMPL(  36 ), pfOutInvL(  36 ), pfOutTypL(  36 ), nOEL(  36 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 36 ) ) ), IOL(  36 ) );
--	OUTCTL37:	OUTCTL port map ( OUTTMPL(  37 ), pfOutInvL(  37 ), pfOutTypL(  37 ), nOEL(  37 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 37 ) ) ), IOL(  37 ) );
--	OUTCTL38:	OUTCTL port map ( OUTTMPL(  38 ), pfOutInvL(  38 ), pfOutTypL(  38 ), nOEL(  38 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 38 ) ) ), IOL(  38 ) );
--	OUTCTL39:	OUTCTL port map ( OUTTMPL(  39 ), pfOutInvL(  39 ), pfOutTypL(  39 ), nOEL(  39 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 39 ) ) ), IOL(  39 ) );

--	OUTCTL40:	OUTCTL port map ( OUTTMPL(  40 ), pfOutInvL(  40 ), pfOutTypL(  40 ), nOEL(  40 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 40 ) ) ), IOL(  40 ) );
--	OUTCTL41:	OUTCTL port map ( OUTTMPL(  41 ), pfOutInvL(  41 ), pfOutTypL(  41 ), nOEL(  41 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 41 ) ) ), IOL(  41 ) );
--	OUTCTL42:	OUTCTL port map ( OUTTMPL(  42 ), pfOutInvL(  42 ), pfOutTypL(  42 ), nOEL(  42 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 42 ) ) ), IOL(  42 ) );
--	OUTCTL43:	OUTCTL port map ( OUTTMPL(  43 ), pfOutInvL(  43 ), pfOutTypL(  43 ), nOEL(  43 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 43 ) ) ), IOL(  43 ) );
--	OUTCTL44:	OUTCTL port map ( OUTTMPL(  44 ), pfOutInvL(  44 ), pfOutTypL(  44 ), nOEL(  44 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 44 ) ) ), IOL(  44 ) );
--	OUTCTL45:	OUTCTL port map ( OUTTMPL(  45 ), pfOutInvL(  45 ), pfOutTypL(  45 ), nOEL(  45 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 45 ) ) ), IOL(  45 ) );
--	OUTCTL46:	OUTCTL port map ( OUTTMPL(  46 ), pfOutInvL(  46 ), pfOutTypL(  46 ), nOEL(  46 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 46 ) ) ), IOL(  46 ) );
--	OUTCTL47:	OUTCTL port map ( OUTTMPL(  47 ), pfOutInvL(  47 ), pfOutTypL(  47 ), nOEL(  47 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 47 ) ) ), IOL(  47 ) );

--	OUTCTL48:	OUTCTL port map ( OUTTMPL(  48 ), pfOutInvL(  48 ), pfOutTypL(  48 ), nOEL(  48 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 48 ) ) ), IOL(  48 ) );
--	OUTCTL49:	OUTCTL port map ( OUTTMPL(  49 ), pfOutInvL(  49 ), pfOutTypL(  49 ), nOEL(  49 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 49 ) ) ), IOL(  49 ) );
--	OUTCTL50:	OUTCTL port map ( OUTTMPL(  50 ), pfOutInvL(  50 ), pfOutTypL(  50 ), nOEL(  50 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 50 ) ) ), IOL(  50 ) );
--	OUTCTL51:	OUTCTL port map ( OUTTMPL(  51 ), pfOutInvL(  51 ), pfOutTypL(  51 ), nOEL(  51 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 51 ) ) ), IOL(  51 ) );
--	OUTCTL52:	OUTCTL port map ( OUTTMPL(  52 ), pfOutInvL(  52 ), pfOutTypL(  52 ), nOEL(  52 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 52 ) ) ), IOL(  52 ) );
--	OUTCTL53:	OUTCTL port map ( OUTTMPL(  53 ), pfOutInvL(  53 ), pfOutTypL(  53 ), nOEL(  53 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 53 ) ) ), IOL(  53 ) );
--	OUTCTL54:	OUTCTL port map ( OUTTMPL(  54 ), pfOutInvL(  54 ), pfOutTypL(  54 ), nOEL(  54 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 54 ) ) ), IOL(  54 ) );
--	OUTCTL55:	OUTCTL port map ( OUTTMPL(  55 ), pfOutInvL(  55 ), pfOutTypL(  55 ), nOEL(  55 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 55 ) ) ), IOL(  55 ) );

--	OUTCTL56:	OUTCTL port map ( OUTTMPL(  56 ), pfOutInvL(  56 ), pfOutTypL(  56 ), nOEL(  56 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 56 ) ) ), IOL(  56 ) );
--	OUTCTL57:	OUTCTL port map ( OUTTMPL(  57 ), pfOutInvL(  57 ), pfOutTypL(  57 ), nOEL(  57 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 57 ) ) ), IOL(  57 ) );
--	OUTCTL58:	OUTCTL port map ( OUTTMPL(  58 ), pfOutInvL(  58 ), pfOutTypL(  58 ), nOEL(  58 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 58 ) ) ), IOL(  58 ) );
--	OUTCTL59:	OUTCTL port map ( OUTTMPL(  59 ), pfOutInvL(  59 ), pfOutTypL(  59 ), nOEL(  59 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 59 ) ) ), IOL(  59 ) );
--	OUTCTL60:	OUTCTL port map ( OUTTMPL(  60 ), pfOutInvL(  60 ), pfOutTypL(  60 ), nOEL(  60 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 60 ) ) ), IOL(  60 ) );
--	OUTCTL61:	OUTCTL port map ( OUTTMPL(  61 ), pfOutInvL(  61 ), pfOutTypL(  61 ), nOEL(  61 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 61 ) ) ), IOL(  61 ) );
--	OUTCTL62:	OUTCTL port map ( OUTTMPL(  62 ), pfOutInvL(  62 ), pfOutTypL(  62 ), nOEL(  62 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 62 ) ) ), IOL(  62 ) );
--	OUTCTL63:	OUTCTL port map ( OUTTMPL(  63 ), pfOutInvL(  63 ), pfOutTypL(  63 ), nOEL(  63 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 63 ) ) ), IOL(  63 ) );

--	OUTCTL64:	OUTCTL port map ( OUTTMPL(  64 ), pfOutInvL(  64 ), pfOutTypL(  64 ), nOEL(  64 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 64 ) ) ), IOL(  64 ) );
--	OUTCTL65:	OUTCTL port map ( OUTTMPL(  65 ), pfOutInvL(  65 ), pfOutTypL(  65 ), nOEL(  65 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 65 ) ) ), IOL(  65 ) );
--	OUTCTL66:	OUTCTL port map ( OUTTMPL(  66 ), pfOutInvL(  66 ), pfOutTypL(  66 ), nOEL(  66 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 66 ) ) ), IOL(  66 ) );
--	OUTCTL67:	OUTCTL port map ( OUTTMPL(  67 ), pfOutInvL(  67 ), pfOutTypL(  67 ), nOEL(  67 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 67 ) ) ), IOL(  67 ) );
--	OUTCTL68:	OUTCTL port map ( OUTTMPL(  68 ), pfOutInvL(  68 ), pfOutTypL(  68 ), nOEL(  68 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 68 ) ) ), IOL(  68 ) );
--	OUTCTL69:	OUTCTL port map ( OUTTMPL(  69 ), pfOutInvL(  69 ), pfOutTypL(  69 ), nOEL(  69 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 69 ) ) ), IOL(  69 ) );
--	OUTCTL70:	OUTCTL port map ( OUTTMPL(  70 ), pfOutInvL(  70 ), pfOutTypL(  70 ), nOEL(  70 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 70 ) ) ), IOL(  70 ) );
--	OUTCTL71:	OUTCTL port map ( OUTTMPL(  71 ), pfOutInvL(  71 ), pfOutTypL(  71 ), nOEL(  71 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 71 ) ) ), IOL(  71 ) );

--	OUTCTL72:	OUTCTL port map ( OUTTMPL(  72 ), pfOutInvL(  72 ), pfOutTypL(  72 ), nOEL(  72 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 72 ) ) ), IOL(  72 ) );
--	OUTCTL73:	OUTCTL port map ( OUTTMPL(  73 ), pfOutInvL(  73 ), pfOutTypL(  73 ), nOEL(  73 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 73 ) ) ), IOL(  73 ) );
--	OUTCTL74:	OUTCTL port map ( OUTTMPL(  74 ), pfOutInvL(  74 ), pfOutTypL(  74 ), nOEL(  74 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 74 ) ) ), IOL(  74 ) );
--	OUTCTL75:	OUTCTL port map ( OUTTMPL(  75 ), pfOutInvL(  75 ), pfOutTypL(  75 ), nOEL(  75 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 75 ) ) ), IOL(  75 ) );
--	OUTCTL76:	OUTCTL port map ( OUTTMPL(  76 ), pfOutInvL(  76 ), pfOutTypL(  76 ), nOEL(  76 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 76 ) ) ), IOL(  76 ) );
--	OUTCTL77:	OUTCTL port map ( OUTTMPL(  77 ), pfOutInvL(  77 ), pfOutTypL(  77 ), nOEL(  77 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 77 ) ) ), IOL(  77 ) );
--	OUTCTL78:	OUTCTL port map ( OUTTMPL(  78 ), pfOutInvL(  78 ), pfOutTypL(  78 ), nOEL(  78 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 78 ) ) ), IOL(  78 ) );
--	OUTCTL79:	OUTCTL port map ( OUTTMPL(  79 ), pfOutInvL(  79 ), pfOutTypL(  79 ), nOEL(  79 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 79 ) ) ), IOL(  79 ) );

--	OUTCTL80:	OUTCTL port map ( OUTTMPL(  80 ), pfOutInvL(  80 ), pfOutTypL(  80 ), nOEL(  80 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 80 ) ) ), IOL(  80 ) );
--	OUTCTL81:	OUTCTL port map ( OUTTMPL(  81 ), pfOutInvL(  81 ), pfOutTypL(  81 ), nOEL(  81 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 81 ) ) ), IOL(  81 ) );
--	OUTCTL82:	OUTCTL port map ( OUTTMPL(  82 ), pfOutInvL(  82 ), pfOutTypL(  82 ), nOEL(  82 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 82 ) ) ), IOL(  82 ) );
--	OUTCTL83:	OUTCTL port map ( OUTTMPL(  83 ), pfOutInvL(  83 ), pfOutTypL(  83 ), nOEL(  83 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 83 ) ) ), IOL(  83 ) );
--	OUTCTL84:	OUTCTL port map ( OUTTMPL(  84 ), pfOutInvL(  84 ), pfOutTypL(  84 ), nOEL(  84 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 84 ) ) ), IOL(  84 ) );
--	OUTCTL85:	OUTCTL port map ( OUTTMPL(  85 ), pfOutInvL(  85 ), pfOutTypL(  85 ), nOEL(  85 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 85 ) ) ), IOL(  85 ) );
--	OUTCTL86:	OUTCTL port map ( OUTTMPL(  86 ), pfOutInvL(  86 ), pfOutTypL(  86 ), nOEL(  86 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 86 ) ) ), IOL(  86 ) );
--	OUTCTL87:	OUTCTL port map ( OUTTMPL(  87 ), pfOutInvL(  87 ), pfOutTypL(  87 ), nOEL(  87 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 87 ) ) ), IOL(  87 ) );

--	OUTCTL88:	OUTCTL port map ( OUTTMPL(  88 ), pfOutInvL(  88 ), pfOutTypL(  88 ), nOEL(  88 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 88 ) ) ), IOL(  88 ) );
--	OUTCTL89:	OUTCTL port map ( OUTTMPL(  89 ), pfOutInvL(  89 ), pfOutTypL(  89 ), nOEL(  89 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 89 ) ) ), IOL(  89 ) );
--	OUTCTL90:	OUTCTL port map ( OUTTMPL(  90 ), pfOutInvL(  90 ), pfOutTypL(  90 ), nOEL(  90 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 90 ) ) ), IOL(  90 ) );
--	OUTCTL91:	OUTCTL port map ( OUTTMPL(  91 ), pfOutInvL(  91 ), pfOutTypL(  91 ), nOEL(  91 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 91 ) ) ), IOL(  91 ) );
--	OUTCTL92:	OUTCTL port map ( OUTTMPL(  92 ), pfOutInvL(  92 ), pfOutTypL(  92 ), nOEL(  92 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 92 ) ) ), IOL(  92 ) );
--	OUTCTL93:	OUTCTL port map ( OUTTMPL(  93 ), pfOutInvL(  93 ), pfOutTypL(  93 ), nOEL(  93 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 93 ) ) ), IOL(  93 ) );
--	OUTCTL94:	OUTCTL port map ( OUTTMPL(  94 ), pfOutInvL(  94 ), pfOutTypL(  94 ), nOEL(  94 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 94 ) ) ), IOL(  94 ) );
--	OUTCTL95:	OUTCTL port map ( OUTTMPL(  95 ), pfOutInvL(  95 ), pfOutTypL(  95 ), nOEL(  95 ), CKOBUF ( CONV_INTEGER ( CKOCHL ( 95 ) ) ), IOL(  95 ) );

	
--	OUTTMPU <= (others=>'1');		-- CKOモジュールと合成用
	OUTTMPU <= IO_OUT1;				-- 2018.05.29 CKOモジュール未対応のため IO_OUT1 直接とする

	OUTCTL100:	OUTCTL port map ( OUTTMPU(   0 ), pfOutInvU(   0 ), pfOutTypU(   0 ), nOEU(   0 ), CKOBUF ( CONV_INTEGER ( CKOCHU (  0 ) ) ), IOU(   0 ) );
	OUTCTL101:	OUTCTL port map ( OUTTMPU(   1 ), pfOutInvU(   1 ), pfOutTypU(   1 ), nOEU(   1 ), CKOBUF ( CONV_INTEGER ( CKOCHU (  1 ) ) ), IOU(   1 ) );
	OUTCTL102:	OUTCTL port map ( OUTTMPU(   2 ), pfOutInvU(   2 ), pfOutTypU(   2 ), nOEU(   2 ), CKOBUF ( CONV_INTEGER ( CKOCHU (  2 ) ) ), IOU(   2 ) );
	OUTCTL103:	OUTCTL port map ( OUTTMPU(   3 ), pfOutInvU(   3 ), pfOutTypU(   3 ), nOEU(   3 ), CKOBUF ( CONV_INTEGER ( CKOCHU (  3 ) ) ), IOU(   3 ) );
	OUTCTL104:	OUTCTL port map ( OUTTMPU(   4 ), pfOutInvU(   4 ), pfOutTypU(   4 ), nOEU(   4 ), CKOBUF ( CONV_INTEGER ( CKOCHU (  4 ) ) ), IOU(   4 ) );
	OUTCTL105:	OUTCTL port map ( OUTTMPU(   5 ), pfOutInvU(   5 ), pfOutTypU(   5 ), nOEU(   5 ), CKOBUF ( CONV_INTEGER ( CKOCHU (  5 ) ) ), IOU(   5 ) );
	OUTCTL106:	OUTCTL port map ( OUTTMPU(   6 ), pfOutInvU(   6 ), pfOutTypU(   6 ), nOEU(   6 ), CKOBUF ( CONV_INTEGER ( CKOCHU (  6 ) ) ), IOU(   6 ) );
	OUTCTL107:	OUTCTL port map ( OUTTMPU(   7 ), pfOutInvU(   7 ), pfOutTypU(   7 ), nOEU(   7 ), CKOBUF ( CONV_INTEGER ( CKOCHU (  7 ) ) ), IOU(   7 ) );

	OUTCTL108:	OUTCTL port map ( OUTTMPU(   8 ), pfOutInvU(   8 ), pfOutTypU(   8 ), nOEU(   8 ), CKOBUF ( CONV_INTEGER ( CKOCHU (  8 ) ) ), IOU(   8 ) );
	OUTCTL109:	OUTCTL port map ( OUTTMPU(   9 ), pfOutInvU(   9 ), pfOutTypU(   9 ), nOEU(   9 ), CKOBUF ( CONV_INTEGER ( CKOCHU (  9 ) ) ), IOU(   9 ) );
	OUTCTL110:	OUTCTL port map ( OUTTMPU(  10 ), pfOutInvU(  10 ), pfOutTypU(  10 ), nOEU(  10 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 10 ) ) ), IOU(  10 ) );
	OUTCTL111:	OUTCTL port map ( OUTTMPU(  11 ), pfOutInvU(  11 ), pfOutTypU(  11 ), nOEU(  11 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 11 ) ) ), IOU(  11 ) );
	OUTCTL112:	OUTCTL port map ( OUTTMPU(  12 ), pfOutInvU(  12 ), pfOutTypU(  12 ), nOEU(  12 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 12 ) ) ), IOU(  12 ) );
	OUTCTL113:	OUTCTL port map ( OUTTMPU(  13 ), pfOutInvU(  13 ), pfOutTypU(  13 ), nOEU(  13 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 13 ) ) ), IOU(  13 ) );
	OUTCTL114:	OUTCTL port map ( OUTTMPU(  14 ), pfOutInvU(  14 ), pfOutTypU(  14 ), nOEU(  14 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 14 ) ) ), IOU(  14 ) );
	OUTCTL115:	OUTCTL port map ( OUTTMPU(  15 ), pfOutInvU(  15 ), pfOutTypU(  15 ), nOEU(  15 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 15 ) ) ), IOU(  15 ) );

	OUTCTL116:	OUTCTL port map ( OUTTMPU(  16 ), pfOutInvU(  16 ), pfOutTypU(  16 ), nOEU(  16 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 16 ) ) ), IOU(  16 ) );
	OUTCTL117:	OUTCTL port map ( OUTTMPU(  17 ), pfOutInvU(  17 ), pfOutTypU(  17 ), nOEU(  17 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 17 ) ) ), IOU(  17 ) );
	OUTCTL118:	OUTCTL port map ( OUTTMPU(  18 ), pfOutInvU(  18 ), pfOutTypU(  18 ), nOEU(  18 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 18 ) ) ), IOU(  18 ) );
	OUTCTL119:	OUTCTL port map ( OUTTMPU(  19 ), pfOutInvU(  19 ), pfOutTypU(  19 ), nOEU(  19 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 19 ) ) ), IOU(  19 ) );
	OUTCTL120:	OUTCTL port map ( OUTTMPU(  20 ), pfOutInvU(  20 ), pfOutTypU(  20 ), nOEU(  20 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 20 ) ) ), IOU(  20 ) );
	OUTCTL121:	OUTCTL port map ( OUTTMPU(  21 ), pfOutInvU(  21 ), pfOutTypU(  21 ), nOEU(  21 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 21 ) ) ), IOU(  21 ) );
	OUTCTL122:	OUTCTL port map ( OUTTMPU(  22 ), pfOutInvU(  22 ), pfOutTypU(  22 ), nOEU(  22 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 22 ) ) ), IOU(  22 ) );
	OUTCTL123:	OUTCTL port map ( OUTTMPU(  23 ), pfOutInvU(  23 ), pfOutTypU(  23 ), nOEU(  23 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 23 ) ) ), IOU(  23 ) );

	OUTCTL124:	OUTCTL port map ( OUTTMPU(  24 ), pfOutInvU(  24 ), pfOutTypU(  24 ), nOEU(  24 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 24 ) ) ), IOU(  24 ) );
	OUTCTL125:	OUTCTL port map ( OUTTMPU(  25 ), pfOutInvU(  25 ), pfOutTypU(  25 ), nOEU(  25 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 25 ) ) ), IOU(  25 ) );
	OUTCTL126:	OUTCTL port map ( OUTTMPU(  26 ), pfOutInvU(  26 ), pfOutTypU(  26 ), nOEU(  26 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 26 ) ) ), IOU(  26 ) );
	OUTCTL127:	OUTCTL port map ( OUTTMPU(  27 ), pfOutInvU(  27 ), pfOutTypU(  27 ), nOEU(  27 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 27 ) ) ), IOU(  27 ) );
	OUTCTL128:	OUTCTL port map ( OUTTMPU(  28 ), pfOutInvU(  28 ), pfOutTypU(  28 ), nOEU(  28 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 28 ) ) ), IOU(  28 ) );
	OUTCTL129:	OUTCTL port map ( OUTTMPU(  29 ), pfOutInvU(  29 ), pfOutTypU(  29 ), nOEU(  29 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 29 ) ) ), IOU(  29 ) );
	OUTCTL130:	OUTCTL port map ( OUTTMPU(  30 ), pfOutInvU(  30 ), pfOutTypU(  30 ), nOEU(  30 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 30 ) ) ), IOU(  30 ) );
	OUTCTL131:	OUTCTL port map ( OUTTMPU(  31 ), pfOutInvU(  31 ), pfOutTypU(  31 ), nOEU(  31 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 31 ) ) ), IOU(  31 ) );

	OUTCTL132:	OUTCTL port map ( OUTTMPU(  32 ), pfOutInvU(  32 ), pfOutTypU(  32 ), nOEU(  32 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 32 ) ) ), IOU(  32 ) );
	OUTCTL133:	OUTCTL port map ( OUTTMPU(  33 ), pfOutInvU(  33 ), pfOutTypU(  33 ), nOEU(  33 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 33 ) ) ), IOU(  33 ) );
	OUTCTL134:	OUTCTL port map ( OUTTMPU(  34 ), pfOutInvU(  34 ), pfOutTypU(  34 ), nOEU(  34 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 34 ) ) ), IOU(  34 ) );
	OUTCTL135:	OUTCTL port map ( OUTTMPU(  35 ), pfOutInvU(  35 ), pfOutTypU(  35 ), nOEU(  35 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 35 ) ) ), IOU(  35 ) );
	OUTCTL136:	OUTCTL port map ( OUTTMPU(  36 ), pfOutInvU(  36 ), pfOutTypU(  36 ), nOEU(  36 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 36 ) ) ), IOU(  36 ) );
	OUTCTL137:	OUTCTL port map ( OUTTMPU(  37 ), pfOutInvU(  37 ), pfOutTypU(  37 ), nOEU(  37 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 37 ) ) ), IOU(  37 ) );
	OUTCTL138:	OUTCTL port map ( OUTTMPU(  38 ), pfOutInvU(  38 ), pfOutTypU(  38 ), nOEU(  38 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 38 ) ) ), IOU(  38 ) );
	OUTCTL139:	OUTCTL port map ( OUTTMPU(  39 ), pfOutInvU(  39 ), pfOutTypU(  39 ), nOEU(  39 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 39 ) ) ), IOU(  39 ) );

	OUTCTL140:	OUTCTL port map ( OUTTMPU(  40 ), pfOutInvU(  40 ), pfOutTypU(  40 ), nOEU(  40 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 40 ) ) ), IOU(  40 ) );
	OUTCTL141:	OUTCTL port map ( OUTTMPU(  41 ), pfOutInvU(  41 ), pfOutTypU(  41 ), nOEU(  41 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 41 ) ) ), IOU(  41 ) );
	OUTCTL142:	OUTCTL port map ( OUTTMPU(  42 ), pfOutInvU(  42 ), pfOutTypU(  42 ), nOEU(  42 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 42 ) ) ), IOU(  42 ) );
	OUTCTL143:	OUTCTL port map ( OUTTMPU(  43 ), pfOutInvU(  43 ), pfOutTypU(  43 ), nOEU(  43 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 43 ) ) ), IOU(  43 ) );
	OUTCTL144:	OUTCTL port map ( OUTTMPU(  44 ), pfOutInvU(  44 ), pfOutTypU(  44 ), nOEU(  44 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 44 ) ) ), IOU(  44 ) );
	OUTCTL145:	OUTCTL port map ( OUTTMPU(  45 ), pfOutInvU(  45 ), pfOutTypU(  45 ), nOEU(  45 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 45 ) ) ), IOU(  45 ) );
	OUTCTL146:	OUTCTL port map ( OUTTMPU(  46 ), pfOutInvU(  46 ), pfOutTypU(  46 ), nOEU(  46 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 46 ) ) ), IOU(  46 ) );
	OUTCTL147:	OUTCTL port map ( OUTTMPU(  47 ), pfOutInvU(  47 ), pfOutTypU(  47 ), nOEU(  47 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 47 ) ) ), IOU(  47 ) );

	OUTCTL148:	OUTCTL port map ( OUTTMPU(  48 ), pfOutInvU(  48 ), pfOutTypU(  48 ), nOEU(  48 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 48 ) ) ), IOU(  48 ) );
	OUTCTL149:	OUTCTL port map ( OUTTMPU(  49 ), pfOutInvU(  49 ), pfOutTypU(  49 ), nOEU(  49 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 49 ) ) ), IOU(  49 ) );
	OUTCTL150:	OUTCTL port map ( OUTTMPU(  50 ), pfOutInvU(  50 ), pfOutTypU(  50 ), nOEU(  50 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 50 ) ) ), IOU(  50 ) );
	OUTCTL151:	OUTCTL port map ( OUTTMPU(  51 ), pfOutInvU(  51 ), pfOutTypU(  51 ), nOEU(  51 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 51 ) ) ), IOU(  51 ) );
	OUTCTL152:	OUTCTL port map ( OUTTMPU(  52 ), pfOutInvU(  52 ), pfOutTypU(  52 ), nOEU(  52 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 52 ) ) ), IOU(  52 ) );
	OUTCTL153:	OUTCTL port map ( OUTTMPU(  53 ), pfOutInvU(  53 ), pfOutTypU(  53 ), nOEU(  53 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 53 ) ) ), IOU(  53 ) );
	OUTCTL154:	OUTCTL port map ( OUTTMPU(  54 ), pfOutInvU(  54 ), pfOutTypU(  54 ), nOEU(  54 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 54 ) ) ), IOU(  54 ) );
	OUTCTL155:	OUTCTL port map ( OUTTMPU(  55 ), pfOutInvU(  55 ), pfOutTypU(  55 ), nOEU(  55 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 55 ) ) ), IOU(  55 ) );

	OUTCTL156:	OUTCTL port map ( OUTTMPU(  56 ), pfOutInvU(  56 ), pfOutTypU(  56 ), nOEU(  56 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 56 ) ) ), IOU(  56 ) );
	OUTCTL157:	OUTCTL port map ( OUTTMPU(  57 ), pfOutInvU(  57 ), pfOutTypU(  57 ), nOEU(  57 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 57 ) ) ), IOU(  57 ) );
	OUTCTL158:	OUTCTL port map ( OUTTMPU(  58 ), pfOutInvU(  58 ), pfOutTypU(  58 ), nOEU(  58 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 58 ) ) ), IOU(  58 ) );
	OUTCTL159:	OUTCTL port map ( OUTTMPU(  59 ), pfOutInvU(  59 ), pfOutTypU(  59 ), nOEU(  59 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 59 ) ) ), IOU(  59 ) );
	OUTCTL160:	OUTCTL port map ( OUTTMPU(  60 ), pfOutInvU(  60 ), pfOutTypU(  60 ), nOEU(  60 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 60 ) ) ), IOU(  60 ) );
	OUTCTL161:	OUTCTL port map ( OUTTMPU(  61 ), pfOutInvU(  61 ), pfOutTypU(  61 ), nOEU(  61 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 61 ) ) ), IOU(  61 ) );
	OUTCTL162:	OUTCTL port map ( OUTTMPU(  62 ), pfOutInvU(  62 ), pfOutTypU(  62 ), nOEU(  62 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 62 ) ) ), IOU(  62 ) );
	OUTCTL163:	OUTCTL port map ( OUTTMPU(  63 ), pfOutInvU(  63 ), pfOutTypU(  63 ), nOEU(  63 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 63 ) ) ), IOU(  63 ) );

	OUTCTL164:	OUTCTL port map ( OUTTMPU(  64 ), pfOutInvU(  64 ), pfOutTypU(  64 ), nOEU(  64 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 64 ) ) ), IOU(  64 ) );
	OUTCTL165:	OUTCTL port map ( OUTTMPU(  65 ), pfOutInvU(  65 ), pfOutTypU(  65 ), nOEU(  65 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 65 ) ) ), IOU(  65 ) );
	OUTCTL166:	OUTCTL port map ( OUTTMPU(  66 ), pfOutInvU(  66 ), pfOutTypU(  66 ), nOEU(  66 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 66 ) ) ), IOU(  66 ) );
	OUTCTL167:	OUTCTL port map ( OUTTMPU(  67 ), pfOutInvU(  67 ), pfOutTypU(  67 ), nOEU(  67 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 67 ) ) ), IOU(  67 ) );
	OUTCTL168:	OUTCTL port map ( OUTTMPU(  68 ), pfOutInvU(  68 ), pfOutTypU(  68 ), nOEU(  68 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 68 ) ) ), IOU(  68 ) );
	OUTCTL169:	OUTCTL port map ( OUTTMPU(  69 ), pfOutInvU(  69 ), pfOutTypU(  69 ), nOEU(  69 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 69 ) ) ), IOU(  69 ) );
	OUTCTL170:	OUTCTL port map ( OUTTMPU(  70 ), pfOutInvU(  70 ), pfOutTypU(  70 ), nOEU(  70 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 70 ) ) ), IOU(  70 ) );
	OUTCTL171:	OUTCTL port map ( OUTTMPU(  71 ), pfOutInvU(  71 ), pfOutTypU(  71 ), nOEU(  71 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 71 ) ) ), IOU(  71 ) );

	OUTCTL172:	OUTCTL port map ( OUTTMPU(  72 ), pfOutInvU(  72 ), pfOutTypU(  72 ), nOEU(  72 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 72 ) ) ), IOU(  72 ) );
	OUTCTL173:	OUTCTL port map ( OUTTMPU(  73 ), pfOutInvU(  73 ), pfOutTypU(  73 ), nOEU(  73 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 73 ) ) ), IOU(  73 ) );
	OUTCTL174:	OUTCTL port map ( OUTTMPU(  74 ), pfOutInvU(  74 ), pfOutTypU(  74 ), nOEU(  74 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 74 ) ) ), IOU(  74 ) );
	OUTCTL175:	OUTCTL port map ( OUTTMPU(  75 ), pfOutInvU(  75 ), pfOutTypU(  75 ), nOEU(  75 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 75 ) ) ), IOU(  75 ) );
	OUTCTL176:	OUTCTL port map ( OUTTMPU(  76 ), pfOutInvU(  76 ), pfOutTypU(  76 ), nOEU(  76 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 76 ) ) ), IOU(  76 ) );
	OUTCTL177:	OUTCTL port map ( OUTTMPU(  77 ), pfOutInvU(  77 ), pfOutTypU(  77 ), nOEU(  77 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 77 ) ) ), IOU(  77 ) );
	OUTCTL178:	OUTCTL port map ( OUTTMPU(  78 ), pfOutInvU(  78 ), pfOutTypU(  78 ), nOEU(  78 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 78 ) ) ), IOU(  78 ) );
	OUTCTL179:	OUTCTL port map ( OUTTMPU(  79 ), pfOutInvU(  79 ), pfOutTypU(  79 ), nOEU(  79 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 79 ) ) ), IOU(  79 ) );

	OUTCTL180:	OUTCTL port map ( OUTTMPU(  80 ), pfOutInvU(  80 ), pfOutTypU(  80 ), nOEU(  80 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 80 ) ) ), IOU(  80 ) );
	OUTCTL181:	OUTCTL port map ( OUTTMPU(  81 ), pfOutInvU(  81 ), pfOutTypU(  81 ), nOEU(  81 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 81 ) ) ), IOU(  81 ) );
	OUTCTL182:	OUTCTL port map ( OUTTMPU(  82 ), pfOutInvU(  82 ), pfOutTypU(  82 ), nOEU(  82 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 82 ) ) ), IOU(  82 ) );
	OUTCTL183:	OUTCTL port map ( OUTTMPU(  83 ), pfOutInvU(  83 ), pfOutTypU(  83 ), nOEU(  83 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 83 ) ) ), IOU(  83 ) );
	OUTCTL184:	OUTCTL port map ( OUTTMPU(  84 ), pfOutInvU(  84 ), pfOutTypU(  84 ), nOEU(  84 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 84 ) ) ), IOU(  84 ) );
	OUTCTL185:	OUTCTL port map ( OUTTMPU(  85 ), pfOutInvU(  85 ), pfOutTypU(  85 ), nOEU(  85 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 85 ) ) ), IOU(  85 ) );
	OUTCTL186:	OUTCTL port map ( OUTTMPU(  86 ), pfOutInvU(  86 ), pfOutTypU(  86 ), nOEU(  86 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 86 ) ) ), IOU(  86 ) );
	OUTCTL187:	OUTCTL port map ( OUTTMPU(  87 ), pfOutInvU(  87 ), pfOutTypU(  87 ), nOEU(  87 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 87 ) ) ), IOU(  87 ) );

	OUTCTL188:	OUTCTL port map ( OUTTMPU(  88 ), pfOutInvU(  88 ), pfOutTypU(  88 ), nOEU(  88 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 88 ) ) ), IOU(  88 ) );
	OUTCTL189:	OUTCTL port map ( OUTTMPU(  89 ), pfOutInvU(  89 ), pfOutTypU(  89 ), nOEU(  89 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 89 ) ) ), IOU(  89 ) );
	OUTCTL190:	OUTCTL port map ( OUTTMPU(  90 ), pfOutInvU(  90 ), pfOutTypU(  90 ), nOEU(  90 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 90 ) ) ), IOU(  90 ) );
	OUTCTL191:	OUTCTL port map ( OUTTMPU(  91 ), pfOutInvU(  91 ), pfOutTypU(  91 ), nOEU(  91 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 91 ) ) ), IOU(  91 ) );
	OUTCTL192:	OUTCTL port map ( OUTTMPU(  92 ), pfOutInvU(  92 ), pfOutTypU(  92 ), nOEU(  92 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 92 ) ) ), IOU(  92 ) );
	OUTCTL193:	OUTCTL port map ( OUTTMPU(  93 ), pfOutInvU(  93 ), pfOutTypU(  93 ), nOEU(  93 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 93 ) ) ), IOU(  93 ) );
	OUTCTL194:	OUTCTL port map ( OUTTMPU(  94 ), pfOutInvU(  94 ), pfOutTypU(  94 ), nOEU(  94 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 94 ) ) ), IOU(  94 ) );
	OUTCTL195:	OUTCTL port map ( OUTTMPU(  95 ), pfOutInvU(  95 ), pfOutTypU(  95 ), nOEU(  95 ), CKOBUF ( CONV_INTEGER ( CKOCHU ( 95 ) ) ), IOU(  95 ) );









	
	
	-- F000 ～ F2FF
		
	-- Write/Read レジスタ制御プロセス --
	process (
		RESET,			-- リセット Lo Active
		DATI,
		WRe,				-- Write Lo Active
		RDe,				-- Read Lo Active
		ADR,				-- ADDRESS 16Bit
--		pfOutInvL,
		pfOutInvU,
--		pfOutTypL,
		pfOutTypU
	)
	begin
		
		if ( RESET = '0' ) then
		
			D_Hiz				<= '1';

			for i in 0 to 95 loop
--				CKOCHL ( i ) <= ( others => '1' );	-- for Lower 96s IO Initialize = "1111"
				CKOCHU ( i ) <= ( others => '1' );	-- for Upper 96s IO Initialize = "1111"
			end loop;

--			pfOutTypL		<= (others=>'0');	-- 0: OpenDrain
			pfOutTypU		<= (others=>'0');	-- 0: OpenDrain
--			pfOutInvL		<= (others=>'0');	-- 0: non invert
			pfOutInvU		<= (others=>'0');	-- 0: non invert
			
--			nOEL				<= (others=>'1');	-- 1: IN
			nOEU				<= (others=>'1');	-- 1: IN
			
			for j in 0 to 15 loop
				CKICH ( j )		<= (others=>'1');	-- 255=N/A
			end loop;
			
			
			
			-- MOT Module Select
			-- MOT0
			MOTSEL (  0 ) <= CONV_STD_LOGIC_VECTOR (  0, 8 );		-- IOx00 F:0
			-- MOT1
			MOTSEL (  1 ) <= CONV_STD_LOGIC_VECTOR (  4, 8 );
			-- MOT2
			MOTSEL (  2 ) <= CONV_STD_LOGIC_VECTOR (  8, 8 );
			-- MOT3
			MOTSEL (  3 ) <= CONV_STD_LOGIC_VECTOR ( 12, 8 );
			-- MOT4
			MOTSEL (  4 ) <= CONV_STD_LOGIC_VECTOR ( 16, 8 );
			-- MOT5
			MOTSEL (  5 ) <= CONV_STD_LOGIC_VECTOR ( 20, 8 );
			-- MOT6
			MOTSEL (  6 ) <= CONV_STD_LOGIC_VECTOR ( 48, 8 );		-- IOx00 R:0
			-- MOT7
			MOTSEL (  7 ) <= CONV_STD_LOGIC_VECTOR ( 52, 8 );
			-- MOT8
			MOTSEL (  8 ) <= CONV_STD_LOGIC_VECTOR ( 56, 8 );
			-- MOT9
			MOTSEL (  9 ) <= CONV_STD_LOGIC_VECTOR ( 60, 8 );
			-- MOT10
			MOTSEL ( 10 ) <= CONV_STD_LOGIC_VECTOR ( 64, 8 );
			-- MOT11
			MOTSEL ( 11 ) <= CONV_STD_LOGIC_VECTOR ( 68, 8 );
			
			MONREG <= (others =>'0');
			
		-- WRITE
		elsif ( WRe = '0' ) then
			-- OUT INVERT -- 0:non / 1:INVERT
--			if		( X"F000" <= ADR and ADR <= X"F00B" ) then		-- F000～F00B	-- Lower
--				pfOutInvL( ( ( CONV_INTEGER( ADR( 3 downto 0 ) ) + 1 ) * 8 - 1 ) downto ( CONV_INTEGER ( ADR ( 3 downto 0 ) ) * 8 ) ) <= DATI;
--			elsif	( X"F010" <= ADR and ADR <= X"F01B" ) then		-- F010～F01B	-- Upper
			if		( X"F010" <= ADR and ADR <= X"F01B" ) then		-- F010～F01B	-- Upper
				pfOutInvU( ( ( CONV_INTEGER( ADR( 3 downto 0 ) ) + 1 ) * 8 - 1 ) downto ( CONV_INTEGER ( ADR ( 3 downto 0 ) ) * 8 ) ) <= DATI;
			-- OUT PP/OD -- 0:OpenDrain / 1:PushPull
--			elsif ( X"F020" <= ADR and ADR <= X"F02B" ) then		-- F020～F02B
--				pfOutTypL( ( ( CONV_INTEGER( ADR( 3 downto 0 ) ) + 1 ) * 8 - 1 ) downto ( CONV_INTEGER ( ADR ( 3 downto 0 ) ) * 8 ) ) <= DATI;
			elsif ( X"F030" <= ADR and ADR <= X"F03B" ) then		-- F030～F03B
				pfOutTypU( ( ( CONV_INTEGER( ADR( 3 downto 0 ) ) + 1 ) * 8 - 1 ) downto ( CONV_INTEGER ( ADR ( 3 downto 0 ) ) * 8 ) ) <= DATI;
			-- OUT ENABLE -- 0:OUT / 1:IN
--			elsif ( X"F040" <= ADR and ADR <= X"F04B" ) then		-- F040～F04B
--				nOEL     ( ( ( CONV_INTEGER( ADR( 3 downto 0 ) ) + 1 ) * 8 - 1 ) downto ( CONV_INTEGER ( ADR ( 3 downto 0 ) ) * 8 ) ) <= DATI;
			elsif ( X"F050" <= ADR and ADR <= X"F05B" ) then		-- F050～F05B
				nOEU     ( ( ( CONV_INTEGER( ADR( 3 downto 0 ) ) + 1 ) * 8 - 1 ) downto ( CONV_INTEGER ( ADR ( 3 downto 0 ) ) * 8 ) ) <= DATI;
				
			-- CKI(FREQ) --	FREQ0..15
			elsif ( X"F060" <= ADR and ADR <= X"F06F" ) then
				CKICH ( CONV_INTEGER ( ADR ( 3 downto 0 ) ) ) <= DATI;
				
				
			-- CKO(PG) -- PG0..15
--			elsif ( X"F100" <= ADR and ADR <= X"F15F" ) then		-- F100～F15F:Lower CKO
--				CKOCHL ( CONV_INTEGER ( ADR ( 7 downto 0 ) ) -  0 ) <= DATI ( 4 downto 0 );
--			-- CKO(PG) -- PG0..15
			elsif ( X"F160" <= ADR and ADR <= X"F1BF" ) then		-- F160～F2BF:Upper CKO
				-- 16ch -> 8ch
--				CKOCHU ( CONV_INTEGER ( ADR ( 7 downto 0 ) ) - 96 ) <= DATI ( 4 downto 0 );
				CKOCHU ( CONV_INTEGER ( ADR ( 7 downto 0 ) ) - 96 ) <= DATI ( 3 downto 0 );
			
			elsif ( X"F1FF" = ADR ) then
				MONREG <= DATI;
				
			-- MOTI MOT0..11 12ch
			elsif ( X"F200" <= ADR and ADR <= X"F22F" ) then		-- F200～F22F: MOTI
--				MOTSEL ( CONV_INTEGER ( ADR ( 5 downto 2 ) ) ) ( ( ( CONV_INTEGER( ADR( 1 downto 0 ) ) + 1 ) * 8 - 1 ) downto ( CONV_INTEGER ( ADR ( 1 downto 0 ) ) * 8 ) ) <= DATI;
				
				if ( "00" = ADR ( 1 downto 0 ) ) then
				-- xxxx:xx00
					MOTSEL ( CONV_INTEGER ( ADR ( 5 downto 2 ) ) ) <= DATI;
				else
				-- xxxx:xx01 ～ xxxx:xx11
					NULL;
				end if;

			else
				NULL;
			end if;
			
			
			
			D_Hiz <= '1';
		-- READ 
		elsif ( RDe = '0' ) then
			-- OUT INVERT Lower -- 0:non / 1:INVERT
--			if 	( X"F000" <= ADR and ADR <= X"F00B" ) then		-- F000～F00B
--				DATA_O	<= pfOutInvL( ( ( CONV_INTEGER( ADR( 3 downto 0 ) ) + 1 ) * 8 - 1 ) downto ( CONV_INTEGER ( ADR ( 3 downto 0 ) ) * 8 ) );
--				D_Hiz		<= '0';
			-- OUT INVERT Upper -- 0:non / 1:INVERT
--			elsif	( X"F010" <= ADR and ADR <= X"F01B" ) then		-- F010～F01B
			if		( X"F010" <= ADR and ADR <= X"F01B" ) then		-- F010～F01B
				DATA_O	<= pfOutInvU( ( ( CONV_INTEGER( ADR( 3 downto 0 ) ) + 1 ) * 8 - 1 ) downto ( CONV_INTEGER ( ADR ( 3 downto 0 ) ) * 8 ) );
				D_Hiz		<= '0';
			-- OUT PP/OD Lower -- 0:OpenDrain / 1:PushPull
--			elsif ( X"F020" <= ADR and ADR <= X"F02B" ) then		-- F020～F02B
--				DATA_O	<= pfOutTypL( ( ( CONV_INTEGER( ADR( 3 downto 0 ) ) + 1 ) * 8 - 1 ) downto ( CONV_INTEGER ( ADR ( 3 downto 0 ) ) * 8 ) );
--				D_Hiz		<= '0';
		-- OUT PP/OD Upper -- 0:OpenDrain / 1:PushPull
			elsif ( X"F030" <= ADR and ADR <= X"F03B" ) then		-- F030～F03B
				DATA_O	<= pfOutTypU( ( ( CONV_INTEGER( ADR( 3 downto 0 ) ) + 1 ) * 8 - 1 ) downto ( CONV_INTEGER ( ADR ( 3 downto 0 ) ) * 8 ) );
				D_Hiz		<= '0';
			-- OUT ENABLE Lower -- 0:OUT / 1:IN
--			elsif ( X"F040" <= ADR and ADR <= X"F04B" ) then		-- F040～F04B
--				DATA_O	<= nOEL( ( ( CONV_INTEGER( ADR( 3 downto 0 ) ) + 1 ) * 8 - 1 ) downto ( CONV_INTEGER ( ADR ( 3 downto 0 ) ) * 8 ) );
--				D_Hiz		<= '0';
			-- OUT ENABLE Upper -- 0:OUT / 1:IN
			elsif ( X"F050" <= ADR and ADR <= X"F05B" ) then		-- F040～F04B
				DATA_O	<= nOEU( ( ( CONV_INTEGER( ADR( 3 downto 0 ) ) + 1 ) * 8 - 1 ) downto ( CONV_INTEGER ( ADR ( 3 downto 0 ) ) * 8 ) );
				D_Hiz		<= '0';
	
	
			-- CKI(FREQ) --	FREQ0..15
			elsif ( X"F060" <= ADR and ADR <= X"F06F" ) then
				DATA_O	<= CKICH ( CONV_INTEGER ( ADR ( 3 downto 0 ) ) );
				D_Hiz		<= '0';
--			elsif ( X"F100" <= ADR and ADR <= X"F15F" ) then
--				DATA_O ( 4 downto 0 )	<= CKOCHL ( CONV_INTEGER ( ADR ( 7 downto 0 ) ) -  0 );
--				DATA_O ( 7 downto 5 )	<= "000";
--				D_Hiz							<= '0';
			elsif ( X"F160" <= ADR and ADR <= X"F1BF" ) then
				-- 16ch -> 8ch
--				DATA_O ( 4 downto 0 )	<= CKOCHU ( CONV_INTEGER ( ADR ( 7 downto 0 ) ) - 96 );
--				DATA_O ( 7 downto 5 )	<= "000";
				DATA_O ( 3 downto 0 )	<= CKOCHU ( CONV_INTEGER ( ADR ( 7 downto 0 ) ) - 96 );
				DATA_O ( 7 downto 4 )	<= "0000";
				D_Hiz							<= '0';
			elsif ( X"F1FF" = ADR ) then
				DATA_O <= MONREG;
				D_Hiz							<= '0';
			elsif ( X"F200" <= ADR and ADR <= X"F22F" ) then
--				DATA_O						<= MOTSEL ( CONV_INTEGER ( ADR ( 5 downto 2 ) ) ) ( (  ( CONV_INTEGER( ADR( 1 downto 0 ) ) + 1 ) * 8 - 1 ) downto ( CONV_INTEGER ( ADR ( 1 downto 0 ) ) * 8 ) );
				
				if ( "00" = ADR ( 1 downto 0 ) ) then
				-- xxxx:xx00
					DATA_O						<= MOTSEL ( CONV_INTEGER ( ADR ( 5 downto 2 ) ) );
					D_Hiz							<= '0';
				else
				-- xxxx:xx01 ～ xxxx:xx11
					D_HIz							<= '1';
				end if;
			else
				D_Hiz		<= '1';
			end if;
		else
			D_Hiz		<= '1';
		end if;
	end process;

	
END PinFunction_architecture;
