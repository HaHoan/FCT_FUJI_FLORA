-- WARNING: Do NOT edit the input and output ports in this file in a text
-- editor if you plan to continue editing the block that represents it in
-- the Block Editor! File corruption is VERY likely to occur.

-- Copyright (C) 2017  Intel Corporation. All rights reserved.
-- Your use of Intel Corporation's design tools, logic functions
-- and other software and tools, and its AMPP partner logic
-- functions, and any output files from any of the foregoing
-- (including device programming or simulation files), and any
-- associated documentation or information are expressly subject
-- to the terms and conditions of the Intel Program License
-- Subscription Agreement, the Intel Quartus Prime License Agreement,
-- the Intel MegaCore Function License Agreement, or other
-- applicable license agreement, including, without limitation,
-- that your use is for the sole purpose of programming logic
-- devices manufactured by Intel and sold by Intel or its
-- authorized distributors.  Please refer to the applicable
-- agreement for further details.


-- Generated by Quartus Prime Version 17.0 (Build Build 595 04/25/2017)
-- Created on Fri Apr 20 21:59:01 2018

LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_unsigned.all;
use IEEE.std_logic_arith.all;


--  Entity Declaration

ENTITY BLINK_SIG IS
	-- {{ALTERA_IO_BEGIN}} DO NOT REMOVE THIS LINE!
	GENERIC(
		NN : INTEGER := 2
	);
	PORT
	(
		CLK10K: IN	STD_LOGIC;
		RESET	: IN	STD_LOGIC;
		IDAT	: IN	STD_LOGIC_VECTOR(31 downto 0);
		ODAT	: OUT	STD_LOGIC_VECTOR(31 downto 0)
	);
	-- {{ALTERA_IO_END}} DO NOT REMOVE THIS LINE!

END BLINK_SIG;


--  Architecture Body

ARCHITECTURE BLINK_SIG_architecture OF BLINK_SIG IS

	SIGNAL PHASE_COUNT	: STD_LOGIC_VECTOR ( 31 downto 0 );

BEGIN

	
	process
	(
		RESET,
		CLK10K
	)
	begin
		if ( RESET = '0' ) then
			PHASE_COUNT <= ( others => '0' );
			ODAT			<= ( others => '0' );
		
		elsif ( CLK10K'event and CLK10K = '1' ) then
			
			if ( CONV_INTEGER ( PHASE_COUNT ) > 5000 - 1 ) then
				
				PHASE_COUNT <= ( others => '0' );
				for i in 0 to ( NN - 1 ) loop
					ODAT ( i )	<= '1';
				end loop;
				
			elsif ( CONV_INTEGER ( PHASE_COUNT ) > 2250 - 1 ) then

				PHASE_COUNT	<= PHASE_COUNT + '1';
				for i in 0 to ( NN - 1 ) loop
					ODAT ( i )	<= '0';
				end loop;

			elsif ( CONV_INTEGER ( PHASE_COUNT ) > 1500 -1 ) then

				PHASE_COUNT	<= PHASE_COUNT + '1';
				for i in 0 to ( NN - 1 ) loop
					if ( IDAT ( i ) = '1' ) then
						ODAT ( i ) <= '1';
					else
						ODAT ( i ) <= '0';
					end if;
				end loop;
			
			elsif ( CONV_INTEGER ( PHASE_COUNT ) > 750 -1 ) then

				PHASE_COUNT	<= PHASE_COUNT + '1';
				for i in 0 to ( NN - 1 ) loop
					ODAT ( i )	<= '0';
				end loop;

			else

				PHASE_COUNT	<= PHASE_COUNT + '1';
				for i in 0 to ( NN - 1 ) loop
					ODAT ( i )	<= '1';
				end loop;

			end if;
	else
			NULL;
			
		end if;
	end process;

	
	


END BLINK_SIG_architecture;
