-- WARNING: Do NOT edit the input and output ports in this file in a text
-- editor if you plan to continue editing the block that represents it in
-- the Block Editor! File corruption is VERY likely to occur.

-- Copyright (C) 2017  Intel Corporation. All rights reserved.
-- Your use of Intel Corporation's design tools, logic functions
-- and other software and tools, and its AMPP partner logic
-- functions, and any output files from any of the foregoing
-- (including device programming or simulation files), and any
-- associated documentation or information are expressly subject
-- to the terms and conditions of the Intel Program License
-- Subscription Agreement, the Intel Quartus Prime License Agreement,
-- the Intel MegaCore Function License Agreement, or other
-- applicable license agreement, including, without limitation,
-- that your use is for the sole purpose of programming logic
-- devices manufactured by Intel and sold by Intel or its
-- authorized distributors.  Please refer to the applicable
-- agreement for further details.


-- Generated by Quartus Prime Version 17.0 (Build Build 595 04/25/2017)
-- Created on Thu May 31 18:02:41 2018

LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_unsigned.all;
use IEEE.std_logic_arith.all;

--  Entity Declaration

ENTITY FREQ16A IS
-- {{ALTERA_IO_BEGIN}} DO NOT REMOVE THIS LINE!
	PORT
	(
		RESET		: IN	STD_LOGIC;
		CLK100	: IN	STD_LOGIC;
		RDe		: IN	STD_LOGIC;
		WRe		: IN	STD_LOGIC;
		ADR		: IN	STD_LOGIC_VECTOR( 15 downto 0 );
		DATI		: IN	STD_LOGIC_VECTOR(  7 downto 0 );
		FREQ		: IN	STD_LOGIC_VECTOR( 15 downto 0 );
		DATO		: OUT	STD_LOGIC_VECTOR(  7 downto 0 );
		TPOUT		: OUT	STD_LOGIC_VECTOR( 15 downto 0 )
	);
-- {{ALTERA_IO_END}} DO NOT REMOVE THIS LINE!

END FREQ16A;


--  Architecture Body

ARCHITECTURE FREQ16A_architecture OF FREQ16A IS

	signal		MODULEVER	: std_logic_vector ( 31 downto 0 ) := X"20180610";

	signal		D_HiZ			: std_logic;				-- データ Hiz
	signal		DATAO			: std_logic_vector ( 7 downto 0 );
	
	signal		START			: std_logic;
	signal		nSOFTRES		: std_logic;
	
	signal		FREQVALID	: std_logic_vector ( 2 downto 0 );
	signal		WIDTHCLKSEL	: std_logic_vector ( 2 downto 0 );
	signal		WIDTHMODE	: std_logic_vector ( 1 downto 0 );
	signal		FILTERCLKSEL: std_logic_vector ( 2 downto 0 );
	signal		FILTERCNT	: std_logic_vector ( 3 downto 0 );
	signal		VALIDF		: std_logic;

	type reg32x16	is array ( 0 to 15 ) of std_logic_vector( 31 downto 0 );
	
	type reg16x16	is array ( 0 to 15 ) of std_logic_vector( 15 downto 0 );
	type reg16x4	is array ( 0 to  3 ) of std_logic_vector( 15 downto 0 );

	
	-- BASE_VALID --
	COMPONENT	BASE_VALID
		port
		(
			RESET 		: IN	STD_LOGIC;
			CLK100M		: IN	STD_LOGIC;
			FREQVALID	: IN	STD_LOGIC_VECTOR(2 downto 0);
			START 		: IN	STD_LOGIC;
			FVALID		: OUT	STD_LOGIC
		);
	END COMPONENT;
	
	signal		CLK100M		: std_logic;
	signal		CLK10M		: std_logic;
	signal		CLK1M			: std_logic;
	signal		CLK100K		: std_logic;
	signal		CLK10K		: std_logic;
	signal		CLK1K			: std_logic;

	-- CLK_GEN --
	COMPONENT	CLK_GEN
		GENERIC
		(
			DIV		: INTEGER
		);
		PORT
		(
			RESET		: IN	STD_LOGIC;
			CLKI		: IN	STD_LOGIC;
			CLKO		: OUT	STD_LOGIC
		);
	END COMPONENT;
	
	-- FILTERSEL --
	COMPONENT	FILTERSEL
		PORT
		(
			RESET			: IN	STD_LOGIC;
			CLK100M		: IN	STD_LOGIC;
			CLK10M		: IN	STD_LOGIC;
			CLK1M			: IN	STD_LOGIC;
			CLK100K		: IN	STD_LOGIC;
			CLK10K		: IN	STD_LOGIC;
			CLK1K			: IN	STD_LOGIC;
			FILTERCLKSEL: IN	STD_LOGIC_VECTOR ( 2 downto 0 );
			FILTERCLK	: OUT	STD_LOGIC
		);	
	END COMPONENT;
	signal		FILTERCLK	:	std_logic;

	-- FILTER --
	COMPONENT	FILTER
		PORT
		(
			RESET			: IN	STD_LOGIC;
			FILTERCNT	: IN	STD_LOGIC_VECTOR( 3 downto 0 );
			FILTERCLK	: IN	STD_LOGIC;
			FREQ			: IN	STD_LOGIC;
			FFREQ			: OUT	STD_LOGIC
		);
	END COMPONENT;
	signal		FLTFREQ		: std_logic_vector ( 15 downto 0 );

	-- FREQUENCY --
	COMPONENT	FREQUENCY
		PORT
		(
			RESET			: IN	STD_LOGIC;
			START			: IN	STD_LOGIC;
			VALIDF		: IN	STD_LOGIC;
			FLTFREQ		: IN	STD_LOGIC;
			FREQCNT		: OUT	STD_LOGIC_VECTOR(15 downto 0)
		);
	END COMPONENT;
	signal		FREQCNT	: reg16x16;

	-- WIDTHCTL --
	COMPONENT	WIDTHCTL
		PORT
		(
			RESET				: IN	STD_LOGIC;
			START				: IN	STD_LOGIC;
			CLK100M			: IN	STD_LOGIC;
			FLTFREQ			: IN	STD_LOGIC;
			WIDTHMODE		: IN	STD_LOGIC_VECTOR(1 downto 0);
			WIDTHSTART		: OUT	STD_LOGIC;
			WIDTHEND			: OUT	STD_LOGIC
		);	
	END COMPONENT;
--	signal	WIDTHSTART	: std_logic_vector( 15 downto 0 );	-- 16ch
--	signal	WIDTHEND		: std_logic_vector( 15 downto 0 );	-- 16ch
--	signal	WIDTHGATE	: std_logic_vector( 15 downto 0 );	-- 16ch
--	signal	WIDTHCNT		: reg16x16;									-- 16ch
--	signal	WIDTHHICNT	: reg16x16;									-- 16ch
	signal	WIDTHSTART	: std_logic_vector(  3 downto 0 );	--  4ch
	signal	WIDTHEND		: std_logic_vector(  3 downto 0 );	--  4ch
	signal	WIDTHGATE	: std_logic_vector(  3 downto 0 );	--  4ch
	signal	WIDTHCNT		: reg16x4;									--  4ch
	signal	WIDTHHICNT	: reg16x4;									--  4ch
	
	-- WDCLKSEL --
	COMPONENT	WDCLKSEL
		PORT
		(
			RESET				: IN	STD_LOGIC;
			WIDTHCLKSEL		: IN	STD_LOGIC_VECTOR( 2 downto 0 );
			CLK100M			: IN	STD_LOGIC;
			CLK10M			: IN	STD_LOGIC;
			CLK1M				: IN	STD_LOGIC;
			CLK100K			: IN	STD_LOGIC;
			CLK10K			: IN	STD_LOGIC;
			CLK1K				: IN	STD_LOGIC;
			WIDTHCLK			: OUT	STD_LOGIC
		);
	END COMPONENT;
	signal	WIDTHCLK		: std_logic;
	
	-- WIDTHCOUNT --
	COMPONENT	WIDTHCOUNT
		PORT
		(
			RESET				: IN	STD_LOGIC;
			START				: IN	STD_LOGIC;
			WIDTHGATE		: IN	STD_LOGIC;
			WIDTHCLK			: IN	STD_LOGIC;
			FILTFREQ			: IN	STD_LOGIC;
			WIDTHCNT			: OUT	STD_LOGIC_VECTOR(15 downto 0);
			WIDTHHICNT		: OUT	STD_LOGIC_VECTOR(15 downto 0);
			TP					: OUT STD_LOGIC
		);	
	END COMPONENT;
	signal	TESTP			: std_logic;
BEGIN

	TPOUT ( 0 ) <= TESTP;
	TPOUT ( 15 downto 1 ) <= (others=>'0');

	
	DATO <= ( others => 'Z' ) when D_HiZ = '1' else  DATAO;

	
	
	-- レジスタ R/W コントロール --
	process
	(
		RESET
	)
	begin
		if ( RESET = '0' ) then
			D_HiZ <= '1';
			
			DATAO			<= ( others => '0' );
			START			<= '0';												-- STOP
			nSOFTRES		<= '1';												-- NoReset
			
			FREQVALID	<= "010";											-- 100ms
			WIDTHCLKSEL	<= "111";											-- 100MHz
			WIDTHMODE	<= "00";												-- Up-Up
			FILTERCLKSEL<= "111";											-- 100MHz
			FILTERCNT	<= "0000";											-- No Filter
		else
		
			if ( RDe = '0' and WRe = '1' ) then
				if		( X"C0C0" = ADR ) then
					DATAO ( 7 )				<= nSOFTRES;					-- 0:RESET / 1:NoRESET
					DATAO ( 6 downto 1 ) <= ( others => '0' );		-- N/A
					DATAO ( 0 )				<= START;						-- 1:START / 0:STOP
					D_Hiz <= '0';
				
				elsif	( X"C0C1" = ADR ) then
					DATAO ( 7 downto 3 )	<= ( others => '0' );		-- N/A
					DATAO ( 2 downto 0 ) <= FREQVALID;					-- Frequency Valid 000:1ms / 001:10ms / [010:100ms] / 011:1000ms / other:ever
					D_Hiz <= '0';
					
				elsif	( X"C0C2" = ADR ) then
					DATAO ( 7 )				<= '0';							-- N/A
					DATAO ( 6 downto 4 )	<= WIDTHCLKSEL;				-- Width Clock Sel 000:10MHz / 001:1MHz / 010:100KHz / 011:10KHz / [other:100MHz]
					DATAO ( 3 downto 2 )	<= "00";							-- N/A
					DATAO ( 1 downto 0 )	<= WIDTHMODE;					--	Width MOde [00:Up-Up] / 01:Up-Down / 10:Down-Up / 11:Down-Down
					D_Hiz <= '0';
				
				elsif ( X"C0C3" = ADR ) then
					DATAO ( 7 )				<= '0';							-- N/A
					DATAO ( 6 downto 4 ) <= FILTERCLKSEL;				-- Filter Clock Sel 000:10MHz / 001:1MHz / 010:100KHz / 011:10KHz / [other:100MHz]
					DATAO ( 3 downto 0 )	<= FILTERCNT;					-- Filter Count [0000:No Filter] / other:Filter Count
					D_Hiz <= '0';
					
				elsif ( X"C0C4" = ADR ) then
					DATAO ( 7 )				<= '0';							-- N/A
					DATAO ( 6 downto 4 ) <= "000";						-- N/A
					DATAO ( 3 downto 0 )	<= WIDTHEND;					-- EOC (WIDTHCOUNT) 1:END / 0:Not End
					D_Hiz <= '0';
					

				elsif ( X"C000" <= ADR and ADR <= X"C03F" ) then
				-- Frequency Count --
-- 32bit
--					DATAO						<= FREQCNT ( CONV_INTEGER ( ADR ( 5 downto 2 ) ) ) ( ( ( CONV_INTEGER ( ADR ( 1 downto 0 ) ) + 1 ) * 8 - 1 )  downto ( CONV_INTEGER ( ADR ( 1 downto 0 ) ) * 8 ) );
-- 16bit				
					if ( "00" <= ADR ( 1 downto 0 ) and ADR ( 1 downto 0 ) <= "01" ) then
						DATAO <= FREQCNT ( CONV_INTEGER ( ADR ( 5 downto 2 ) ) ) ( ( ( CONV_INTEGER ( ADR ( 1 downto 0 ) ) + 1 ) * 8 - 1 )  downto ( CONV_INTEGER ( ADR ( 1 downto 0 ) ) * 8 ) );
					else
						DATAO <= X"00";
					end if;
					D_Hiz <= '0';
--	16ch		elsif ( X"C040" <= ADR and ADR <= X"C07F" ) then
--  4ch
				elsif ( X"C040" <= ADR and ADR <= X"C04F" ) then
				-- Width Count --
-- 32bit
--					DATAO						<= WIDTHCNT ( CONV_INTEGER ( ADR ( 5 downto 2 ) ) ) ( ( ( CONV_INTEGER ( ADR ( 1 downto 0 ) ) + 1 ) * 8 - 1 )  downto ( CONV_INTEGER ( ADR ( 1 downto 0 ) ) * 8 ) );
-- 16bit				
					if ( "00" <= ADR ( 1 downto 0 ) and ADR ( 1 downto 0 ) <= "01" ) then
						DATAO <= WIDTHCNT ( CONV_INTEGER ( ADR ( 5 downto 2 ) ) ) ( ( ( CONV_INTEGER ( ADR ( 1 downto 0 ) ) + 1 ) * 8 - 1 )  downto ( CONV_INTEGER ( ADR ( 1 downto 0 ) ) * 8 ) );
					else
						DATAO <= X"00";
					end if;


					D_Hiz <= '0';
-- 16ch			elsif ( X"C080" <= ADR and ADR <= X"C0BF" ) then
--  4ch
					elsif ( X"C080" <= ADR and ADR <= X"C08F" ) then
				-- Width Hi Count
-- 32bit
--					DATAO						<= WIDTHHICNT ( CONV_INTEGER ( ADR ( 5 downto 2 ) ) ) ( ( ( CONV_INTEGER ( ADR ( 1 downto 0 ) ) + 1 ) * 8 - 1 )  downto ( CONV_INTEGER ( ADR ( 1 downto 0 ) ) * 8 ) );
-- 16bit				
					if ( "00" <= ADR ( 1 downto 0 ) and ADR ( 1 downto 0 ) <= "01" ) then
						DATAO <= WIDTHHICNT ( CONV_INTEGER ( ADR ( 5 downto 2 ) ) ) ( ( ( CONV_INTEGER ( ADR ( 1 downto 0 ) ) + 1 ) * 8 - 1 )  downto ( CONV_INTEGER ( ADR ( 1 downto 0 ) ) * 8 ) );
					else
						DATAO <= X"00";
					end if;
					D_Hiz <= '0';
				elsif ( X"C0F0" <= ADR and ADR <= X"C0F3" ) then
				-- Version Reg
					DATAO						<= MODULEVER ( ( ( CONV_INTEGER ( ADR ( 1 downto 0 ) ) + 1 ) * 8 - 1 ) downto ( CONV_INTEGER ( ADR ( 1 downto 0 ) ) * 8 ) );
					D_Hiz <= '0';
				else
					DATAO <= X"FF";
					D_Hiz <= '1';
				end if;
			elsif ( RDe = '1' and WRe = '0' ) then
				if		( X"C0C0" = ADR ) then
					nSOFTRES					<= DATI ( 7 );					-- 0:RESET / 1:NoRESET
					START						<= DATI ( 0 );					-- 1:START / 0:STOP

				elsif	( X"C0C1" = ADR ) then
					FREQVALID				<= DATI ( 2 downto 0 );		-- Frequency Valid 000:1ms / 001:10ms / [010:100ms] / 011:1000ms / other:ever
					
				elsif	( X"C0C2" = ADR ) then
					WIDTHCLKSEL				<= DATI ( 6 downto 4 );		-- Width Clock Sel 000:10MHz / 001:1MHz / 010:100KHz / 011:10KHz / [other:100MHz]
					WIDTHMODE				<= DATI ( 1 downto 0 );		--	Width MOde [00:Up-Up] / 01:Up-Down / 10:Down-Up / 11:Down-Down
				
				elsif ( X"C0C3" = ADR ) then
					FILTERCLKSEL			<= DATI ( 6 downto 4 );		-- Filter Clock SEL 000:10MHz / 001:1MHz / 010:100KHz / 011:10KHz / [other:100MHz]
					FILTERCNT				<= DATI ( 3 downto 0 );		-- Filter Count [0000:No Filter] / other:Filter Count
					
				else
					NULL;
					
				end if;
				D_Hiz <= '1';
			
			else
				D_Hiz <= '1';
				
			end if;
		
		end if;
	end process;

	
	
-- Frequency Valid --
	BASE_VALID0:
		BASE_VALID
			port		map	( RESET, CLK100, FREQVALID, START, VALIDF );

	
-- CLK_GEN --
	CLK100M		<= CLK100;
	CLK_GEN0:
		CLK_GEN
			generic	map	( 10 )								-- 100MHz / 10 = 10MHz
			port		map	( RESET, CLK100, CLK10M );
	CLK_GEN1:
		CLK_GEN
			generic	map	( 10 )								-- 10MHz / 10 = 1MHz
			port		map	( RESET, CLK10M, CLK1M );
	CLK_GEN2:
		CLK_GEN
			generic	map	( 10 )								-- 1MHz / 10 = 100KHz
			port		map	( RESET, CLK1M, CLK100K );
	CLK_GEN3:
		CLK_GEN
			generic	map	( 10 )								-- 100KHz / 10 = 10KHz
			port		map	( RESET, CLK100K, CLK10K );
	CLK_GEN4:
		CLK_GEN
			generic	map	( 10 )								-- 10KHz / 10 = 1KHz
			port		map	( RESET, CLK10K, CLK1K );
	
-- FILTERSEL --
	FILTERSEL0:
		FILTERSEL
			port		map	( RESET, CLK100M, CLK10M, CLK1M, CLK100K, CLK10K, CLK1K, FILTERCLKSEL, FILTERCLK );
	
-- FILTER --
	FILTER0:
		FILTER
			port		map	( RESET, FILTERCNT, FILTERCLK, FREQ (  0 ), FLTFREQ (  0 ) );
	FILTER1:
		FILTER
			port		map	( RESET, FILTERCNT, FILTERCLK, FREQ (  1 ), FLTFREQ (  1 ) );
	FILTER2:
		FILTER
			port		map	( RESET, FILTERCNT, FILTERCLK, FREQ (  2 ), FLTFREQ (  2 ) );
	FILTER3:
		FILTER
			port		map	( RESET, FILTERCNT, FILTERCLK, FREQ (  3 ), FLTFREQ (  3 ) );
	FILTER4:
		FILTER
			port		map	( RESET, FILTERCNT, FILTERCLK, FREQ (  4 ), FLTFREQ (  4 ) );
	FILTER5:
		FILTER
			port		map	( RESET, FILTERCNT, FILTERCLK, FREQ (  5 ), FLTFREQ (  5 ) );
	FILTER6:
		FILTER
			port		map	( RESET, FILTERCNT, FILTERCLK, FREQ (  6 ), FLTFREQ (  6 ) );
	FILTER7:
		FILTER
			port		map	( RESET, FILTERCNT, FILTERCLK, FREQ (  7 ), FLTFREQ (  7 ) );
	FILTER8:
		FILTER
			port		map	( RESET, FILTERCNT, FILTERCLK, FREQ (  8 ), FLTFREQ (  8 ) );
	FILTER9:
		FILTER
			port		map	( RESET, FILTERCNT, FILTERCLK, FREQ (  9 ), FLTFREQ (  9 ) );
	FILTER10:
		FILTER
			port		map	( RESET, FILTERCNT, FILTERCLK, FREQ ( 10 ), FLTFREQ ( 10 ) );
	FILTER11:
		FILTER
			port		map	( RESET, FILTERCNT, FILTERCLK, FREQ ( 11 ), FLTFREQ ( 11 ) );
	FILTER12:
		FILTER
			port		map	( RESET, FILTERCNT, FILTERCLK, FREQ ( 12 ), FLTFREQ ( 12 ) );
	FILTER13:
		FILTER
			port		map	( RESET, FILTERCNT, FILTERCLK, FREQ ( 13 ), FLTFREQ ( 13 ) );
	FILTER14:
		FILTER
			port		map	( RESET, FILTERCNT, FILTERCLK, FREQ ( 14 ), FLTFREQ ( 14 ) );
	FILTER15:
		FILTER
			port		map	( RESET, FILTERCNT, FILTERCLK, FREQ ( 15 ), FLTFREQ ( 15 ) );
	
-- FREQUENCY --
	FREQUENCY0:
		FREQUENCY
			port		map	( RESET, START, VALIDF, FLTFREQ (  0 ), FREQCNT (  0 ) );
	FREQUENCY1:
		FREQUENCY
			port		map	( RESET, START, VALIDF, FLTFREQ (  1 ), FREQCNT (  1 ) );
	FREQUENCY2:
		FREQUENCY
			port		map	( RESET, START, VALIDF, FLTFREQ (  2 ), FREQCNT (  2 ) );
	FREQUENCY3:
		FREQUENCY
			port		map	( RESET, START, VALIDF, FLTFREQ (  3 ), FREQCNT (  3 ) );
	FREQUENCY4:
		FREQUENCY
			port		map	( RESET, START, VALIDF, FLTFREQ (  4 ), FREQCNT (  4 ) );
	FREQUENCY5:
		FREQUENCY
			port		map	( RESET, START, VALIDF, FLTFREQ (  5 ), FREQCNT (  5 ) );
	FREQUENCY6:
		FREQUENCY
			port		map	( RESET, START, VALIDF, FLTFREQ (  6 ), FREQCNT (  6 ) );
	FREQUENCY7:
		FREQUENCY
			port		map	( RESET, START, VALIDF, FLTFREQ (  7 ), FREQCNT (  7 ) );
	FREQUENCY8:
		FREQUENCY
			port		map	( RESET, START, VALIDF, FLTFREQ (  8 ), FREQCNT (  8 ) );
	FREQUENCY9:
		FREQUENCY
			port		map	( RESET, START, VALIDF, FLTFREQ (  9 ), FREQCNT (  9 ) );
	FREQUENCY10:
		FREQUENCY
			port		map	( RESET, START, VALIDF, FLTFREQ ( 10 ), FREQCNT ( 10 ) );
	FREQUENCY11:
		FREQUENCY
			port		map	( RESET, START, VALIDF, FLTFREQ ( 11 ), FREQCNT ( 11 ) );
	FREQUENCY12:
		FREQUENCY
			port		map	( RESET, START, VALIDF, FLTFREQ ( 12 ), FREQCNT ( 12 ) );
	FREQUENCY13:
		FREQUENCY
			port		map	( RESET, START, VALIDF, FLTFREQ ( 13 ), FREQCNT ( 13 ) );
	FREQUENCY14:
		FREQUENCY
			port		map	( RESET, START, VALIDF, FLTFREQ ( 14 ), FREQCNT ( 14 ) );
	FREQUENCY15:
		FREQUENCY
			port		map	( RESET, START, VALIDF, FLTFREQ ( 15 ), FREQCNT ( 15 ) );

-- WIDTHCTL --
	WIDTHGATE	<= WIDTHSTART xor WIDTHEND;

	WIDTHCTL0:
		WIDTHCTL
			port		map	( RESET, START, CLK100M, FLTFREQ (  0 ), WIDTHMODE, WIDTHSTART (  0 ), WIDTHEND (  0 ) );
	WIDTHCTL1:
		WIDTHCTL
			port		map	( RESET, START, CLK100M, FLTFREQ (  1 ), WIDTHMODE, WIDTHSTART (  1 ), WIDTHEND (  1 ) );
	WIDTHCTL2:
		WIDTHCTL
			port		map	( RESET, START, CLK100M, FLTFREQ (  2 ), WIDTHMODE, WIDTHSTART (  2 ), WIDTHEND (  2 ) );
	WIDTHCTL3:
		WIDTHCTL
			port		map	( RESET, START, CLK100M, FLTFREQ (  3 ), WIDTHMODE, WIDTHSTART (  3 ), WIDTHEND (  3 ) );

-- ch4 .. 15
--	WIDTHCTL4:
--		WIDTHCTL
--			port		map	( RESET, START, CLK100M, FLTFREQ (  4 ), WIDTHMODE, WIDTHSTART (  4 ), WIDTHEND (  4 ) );
--	WIDTHCTL5:
--		WIDTHCTL
--			port		map	( RESET, START, CLK100M, FLTFREQ (  5 ), WIDTHMODE, WIDTHSTART (  5 ), WIDTHEND (  5 ) );
--	WIDTHCTL6:
--		WIDTHCTL
--			port		map	( RESET, START, CLK100M, FLTFREQ (  6 ), WIDTHMODE, WIDTHSTART (  6 ), WIDTHEND (  6 ) );
--	WIDTHCTL7:
--		WIDTHCTL
--			port		map	( RESET, START, CLK100M, FLTFREQ (  7 ), WIDTHMODE, WIDTHSTART (  7 ), WIDTHEND (  7 ) );
--	WIDTHCTL8:
--		WIDTHCTL
--			port		map	( RESET, START, CLK100M, FLTFREQ (  8 ), WIDTHMODE, WIDTHSTART (  8 ), WIDTHEND (  8 ) );
--	WIDTHCTL9:
--		WIDTHCTL
--			port		map	( RESET, START, CLK100M, FLTFREQ (  9 ), WIDTHMODE, WIDTHSTART (  9 ), WIDTHEND (  9 ) );
--	WIDTHCTL10:
--		WIDTHCTL
--			port		map	( RESET, START, CLK100M, FLTFREQ ( 10 ), WIDTHMODE, WIDTHSTART ( 10 ), WIDTHEND ( 10 ) );
--	WIDTHCTL11:
--		WIDTHCTL
--			port		map	( RESET, START, CLK100M, FLTFREQ ( 11 ), WIDTHMODE, WIDTHSTART ( 11 ), WIDTHEND ( 11 ) );
--	WIDTHCTL12:
--		WIDTHCTL
--			port		map	( RESET, START, CLK100M, FLTFREQ ( 12 ), WIDTHMODE, WIDTHSTART ( 12 ), WIDTHEND ( 12 ) );
--	WIDTHCTL13:
--		WIDTHCTL
--			port		map	( RESET, START, CLK100M, FLTFREQ ( 13 ), WIDTHMODE, WIDTHSTART ( 13 ), WIDTHEND ( 13 ) );
--	WIDTHCTL14:
--		WIDTHCTL
--			port		map	( RESET, START, CLK100M, FLTFREQ ( 14 ), WIDTHMODE, WIDTHSTART ( 14 ), WIDTHEND ( 14 ) );
--	WIDTHCTL15:
--		WIDTHCTL
--			port		map	( RESET, START, CLK100M, FLTFREQ ( 15 ), WIDTHMODE, WIDTHSTART ( 15 ), WIDTHEND ( 15 ) );
			
-- WDCLKSEL --
	WDCLKSEL0:
		WDCLKSEL
			port		map	( RESET, WIDTHCLKSEL, CLK100M, CLK10M, CLK1M, CLK100K, CLK10K, CLK1K, WIDTHCLK );

-- WIDTHCOUNT --
	WIDTHCOUNT0:
		WIDTHCOUNT
			port		map	( RESET, START, WIDTHGATE (  0 ), WIDTHCLK, FLTFREQ (  0 ), WIDTHCNT (  0 ), WIDTHHICNT (  0 ) );
	WIDTHCOUNT1:
		WIDTHCOUNT
			port		map	( RESET, START, WIDTHGATE (  1 ), WIDTHCLK, FLTFREQ (  1 ), WIDTHCNT (  1 ), WIDTHHICNT (  1 ) );
	WIDTHCOUNT2:
		WIDTHCOUNT
			port		map	( RESET, START, WIDTHGATE (  2 ), WIDTHCLK, FLTFREQ (  2 ), WIDTHCNT (  2 ), WIDTHHICNT (  2 ) );
	WIDTHCOUNT3:
		WIDTHCOUNT
			port		map	( RESET, START, WIDTHGATE (  3 ), WIDTHCLK, FLTFREQ (  3 ), WIDTHCNT (  3 ), WIDTHHICNT (  3 ) );

-- 4ch - 15ch
--	WIDTHCOUNT4:
--		WIDTHCOUNT
--			port		map	( RESET, START, WIDTHGATE (  4 ), WIDTHCLK, FLTFREQ (  4 ), WIDTHCNT (  4 ), WIDTHHICNT (  4 ) );
--	WIDTHCOUNT5:
--		WIDTHCOUNT
--			port		map	( RESET, START, WIDTHGATE (  5 ), WIDTHCLK, FLTFREQ (  5 ), WIDTHCNT (  5 ), WIDTHHICNT (  5 ) );
--	WIDTHCOUNT6:
--		WIDTHCOUNT
--			port		map	( RESET, START, WIDTHGATE (  6 ), WIDTHCLK, FLTFREQ (  6 ), WIDTHCNT (  6 ), WIDTHHICNT (  6 ) );
--	WIDTHCOUNT7:
--		WIDTHCOUNT
--			port		map	( RESET, START, WIDTHGATE (  7 ), WIDTHCLK, FLTFREQ (  7 ), WIDTHCNT (  7 ), WIDTHHICNT (  7 ) );
--	WIDTHCOUNT8:
--		WIDTHCOUNT
--			port		map	( RESET, START, WIDTHGATE (  8 ), WIDTHCLK, FLTFREQ (  8 ), WIDTHCNT (  8 ), WIDTHHICNT (  8 ) );
--	WIDTHCOUNT9:
--		WIDTHCOUNT
--			port		map	( RESET, START, WIDTHGATE (  9 ), WIDTHCLK, FLTFREQ (  9 ), WIDTHCNT (  9 ), WIDTHHICNT (  9 ) );
--	WIDTHCOUNT10:
--		WIDTHCOUNT
--			port		map	( RESET, START, WIDTHGATE ( 10 ), WIDTHCLK, FLTFREQ ( 10 ), WIDTHCNT ( 10 ), WIDTHHICNT ( 10 ) );
--	WIDTHCOUNT11:
--		WIDTHCOUNT
--			port		map	( RESET, START, WIDTHGATE ( 11 ), WIDTHCLK, FLTFREQ ( 11 ), WIDTHCNT ( 11 ), WIDTHHICNT ( 11 ) );
--	WIDTHCOUNT12:
--		WIDTHCOUNT
--			port		map	( RESET, START, WIDTHGATE ( 12 ), WIDTHCLK, FLTFREQ ( 12 ), WIDTHCNT ( 12 ), WIDTHHICNT ( 12 ) );
--	WIDTHCOUNT13:
--		WIDTHCOUNT
--			port		map	( RESET, START, WIDTHGATE ( 13 ), WIDTHCLK, FLTFREQ ( 13 ), WIDTHCNT ( 13 ), WIDTHHICNT ( 13 ) );
--	WIDTHCOUNT14:
--		WIDTHCOUNT
--			port		map	( RESET, START, WIDTHGATE ( 14 ), WIDTHCLK, FLTFREQ ( 14 ), WIDTHCNT ( 14 ), WIDTHHICNT ( 14 ) );
--	WIDTHCOUNT15:
--		WIDTHCOUNT
--			port		map	( RESET, START, WIDTHGATE ( 15 ), WIDTHCLK, FLTFREQ ( 15 ), WIDTHCNT ( 15 ), WIDTHHICNT ( 15 ) );

		
	
	
END FREQ16A_architecture;
